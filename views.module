<?php

// ---------------------------------------------------------------------------
// Select Box Definitions

function _views_get_arguments_default() {
  return array(
    1 => t('Return Page Not Found'),
    2 => t('Display All Values'),
    3 => t('Summary Of Choices')
   );
}

function _views_types() {
  return array(
    1 => t("List View"), 
    2 => t("Table View"), 
    3 => t("Teaser List"),
    4 => t("Full Nodes"),
    5 => t("Random Teaser"),
    6 => t("Random Node")
  );
}

function _views_urls() {
  return array(
    1 => t("No URL"), 
    2 => t("URL without Menu Entry"), 
    3 => t("URL with Menu Entry")
  );
}

function _views_sortorders() {
  return array(
    "ASC" => t("Ascending"),
    "DESC" => t("Descending")
  );
}

function _views_internal_arguments() {
  $arguments = array(
    'nodetype' => array('name' => t("Node Type"), 'handler' => "views_handler_arg_nodetype"),
    'uid' => array('name' => t("User ID"), 'handler' => "views_handler_arg_uid"),
    'taxid' => array('name' => t("Taxonomy Term ID"), 'handler' => "views_handler_arg_taxid"),
    'year' => array('name' => t("Year"), 'handler' => "views_handler_arg_year"),
    'month' => array('name' => t("Month (1-12)"), 'handler' => "views_handler_arg_month"),
    'week' => array('name' => t("Week (1-53)"), 'handler' => "views_handler_arg_week"),
    'monthyear' => array('name' => t("Month + Year (CCYYMM)"), 'handler' => "views_handler_arg_monthyear"),
    'fulldate' => array('name' => t("Full Date (CCYYMMDD)"), 'handler' => "views_handler_arg_fulldate"),
  );
  return $arguments;
}

// Argument info...
// OR: arg_handler($op, ...): $op in('filter', 'fields', 'link')

function _views_get_arguments() {
  global $VIEWS_ARGUMENTS;

  if (!$VIEWS_ARGUMENTS) {
    $arguments = array_merge(module_invoke_all('views_arguments'), _views_internal_arguments());
    foreach ($arguments as $table => $arg) {
      $VIEWS_ARGUMENTS['name'][$table] = $arg['name'];
      $VIEWS_ARGUMENTS['handler'][$table] = $arg['handler'];
    }
  }
  return $VIEWS_ARGUMENTS;
}


function _views_internal_tables() {

  if (module_exist('taxonomy')) {
    $tables['term_node'] = array(
      "name" => "term_node", 
      "provider" => "internal",
      "join" => array(
        "left" => array(
          "table" => "node",
          "field" => "nid"
        ), 
        "right" => array(
          "field" => "nid"
        )
      ),
      "filters" => array(
        "tid" => array(
          'name' => "Taxonomy Term",
          'list' => "views_handler_filter_tid",
          'operator' => "views_handler_operator_andor",
        )
      )
    );

    $tables['term_data'] = array(
      "name" => "term_data", 
      "provider" => "internal",
      "join" => array(
        "left" => array(
          "table" => "term_node",
          "field" => "tid"
        ), 
        "right" => array(
          "field" => "tid"
        ), 
      ),
      "fields" => array(
        "name" => array(
          'name' => "Taxonomy Term", 
          'sortable' => true
        ),
        "description" => array(
          'name' => "Taxonomy Term Description", 
          'sortable' => false
        ),
      ),
      "sorts" => array(
        "weight" => array(
          'name' => "Taxonomy Name", 
          'field' => array('weight', 'name')
        )
      ),
      "filters" => array(
        "vid" => array(
          'name' => "Vocabulary Term",
          'list' => "views_handler_filter_vid",
          'operator' => "views_handler_operator_andor",
        )
      )
    );
  }

  if (module_exist('comment')) {
    $tables['node_comment_statistics'] = array(
      "name" => "node_comment_statistics", 
      "provider" => "internal",
      "join" => array(
        "left" => array(
          "table" => "node",
          "field" => "nid"
        ), 
        "right" => array(
          "field" => "nid"
        ), 
      ),
      "fields" => array(
        "last_comment_timestamp" => array(
          'name' => "Last Comment Time", 
          'sortable' => true, 
          'handler' => array("views_handler_field_date" => "As Date", "views_handler_field_since" => "As Time Ago")
         ),
        "last_comment_name" => array(
          'name' => "Last Comment Author", 
          'handler' => 'views_handler_field_username', 
          'sortable' => true, 
          'uid' => "last_comment_uid", 
          'addlfields' => array("last_comment_uid")
        ),
        "comment_count" => array(
          'name' => "Comment Count", 
          'sortable' => true, 
          'handler' => array("views_handler_field_int" => "Normal", "views_handler_comments_with_new" => "With New Count")
        ),
      ),
      "sorts" => array(
        "last_comment_timestamp" => array('name' => "Last Comment Date")
      )
    );
  }

  $tables['users'] = array(
    "name" => "users", 
    "provider" => "internal", // won't show up in external list.
    "join" => array(
      "left" => array(
        "table" => "node",
        "field" => "uid"
      ), 
      "right" => array(
        "field" => "uid"
      ), 
    ),
    "fields" => array(
      "name" => array(
        'name' => "Node Author Name", 
        'handler' => 'views_handler_field_username', 
        'sortable' => true, 
        'uid' => "uid", 
        'addlfields' => array("uid")
      ),
    ),
    "sorts" => array(
      "name" => array('name' => "Node Author Name")
    ),
    "filters" => array(
      "uid" => array(
        'name' => "Node Author Name",
        'operator' => "views_handler_operator_or",
        'list' => "views_handler_filter_username"
      ),
      "anon" => array(
        'field' => 'uid',
        'name' => "Node Author is Anonymous",
        'operator' => "views_handler_operator_eqneq",
        'list' => "views_handler_filter_useranon"
      ),
      "currentuid" => array(
        'name' => "Node Author is Current User",
        'operator' => "views_handler_operator_eqneq",
        'list' => "views_handler_filter_usercurrent",
        'custom' => "views_handler_filter_usercurrent_custom",
        'cacheable' => 'no', // for future use.
      ),
    )
  );

  $tables['users_roles'] = array(
    "name" => "users_role", 
    "provider" => "internal", // won't show up in external list.
    "join" => array(
      "left" => array(
        "table" => "node",
        "field" => "uid"
      ), 
      "right" => array(
        "field" => "uid"
      ), 
    ),
    "filters" => array(
      "rid" => array(
        'name' => "Author Role",
        'operator' => "views_handler_operator_andor",
        'list' => "views_handler_filter_role"
      ),
    )
  );
  
  $tables['n'] = array(
    "name" => "n", 
    "provider" => "internal", // won't show up in external list.
    "fields" => array(
      "title" => array(
        'name' => "Node Title", 
        'handler' => array('views_handler_field_nodelink' => 'Normal', 'views_handler_field_nodelink_with_mark' => "With updated mark"),
        'sortable' => true, 'addlfields' => array('changed') 
      ),
      "created" => array(
        'name' => "Node Created Time", 
        'sortable' => true, 
        'handler' => array("views_handler_field_date" => "As Date", "views_handler_field_since" => "As Time Ago")
      ),
      "changed" => array(
        'name' => "Node Updated Time", 
        'sortable' => true, 
        'handler' => array("views_handler_field_date" => "As Date", "views_handler_field_since" => "As Time Ago")
      ),
      "type" => array(
        'name' => "Node Type", 
        'handler' => 'views_handler_nodetype', 
        'sortable' => true
      ),
    ),
    "sorts" => array(
      "created" => array('name' => "Post Date", 'table' => 'n'),
      "changed" => array('name' => "Last Changed Date", 'table' => 'n'),
      "sticky" => array('name' => "Node set to Sticky", 'table' => 'n'),
      "title" => array('name' => "Node Title", 'table' => 'n')
    ),
    "filters" => array(
      "status" => array(
        'name' => "Published",
        'table' => "n",
        'operator' => array("=" => "Equals"),
        'list' => "views_handler_operator_yesno",
        'list-type' => "select"
      ),
      "promote" => array(
        'name' => "Front Page",
        'table' => "n",
        'operator' => array("=" => "Equals"),
        'list' => "views_handler_operator_yesno",
        'list-type' => "select"
      ),
      "type" => array(
        'name' => "Node Type",
        'table' => "n",
        'list' => "views_handler_filter_nodetype",
        'list-type' => 'checkbox',
        'operator' => "views_handler_operator_or"
      ),
    ),

  );    
  return $tables;
}

function _views_get_tables() {
  global $VIEWS_TABLES;

  if (!$VIEWS_TABLES) {
    $VIEWS_TABLES = array_merge(module_invoke_all('views_tables'), _views_internal_tables());
  }
  return $VIEWS_TABLES;
}

// filters
// name
// field (in case the array key is not the field)
// list: (if array use; otherwise it is a handler)
// list-type: checkbox, list, select
// operator: (if array use; otherwise it is a handler)
// transform: if here, handler for transforming data.
// validate: if here, handler for validating data.


// There may also be a generally better way to organize the data.

function _views_organize_data() {
  global $VIEWS_FILTERS;
  global $VIEWS_FILTERS_TITLES;
  global $VIEWS_FIELDS;
  global $VIEWS_FIELDS_TITLES;
  global $VIEWS_SORTS;
  global $VIEWS_SORTS_TITLES;

  $table_data = _views_get_tables();
  
  foreach ($table_data as $name => $table) {
    if (is_array($table['filters'])) {
      foreach($table['filters'] as $filter => $data) {
        $data['table'] = $name;
        $VIEWS_FILTERS_TITLES["$table[name].$filter"] = $data['name'];
        $VIEWS_FILTERS["$table[name].$filter"] = $data;
      }
    }
    if (is_array($table['fields'])) {
      foreach($table['fields'] as $field => $data) {
        $data['table'] = $name;
        $VIEWS_FIELDS_TITLES["$table[name].$field"] = $data['name'];
        $VIEWS_FIELDS["$table[name].$field"] = $data;
      }
    }
    if (is_array($table['sorts'])) {
      foreach($table['sorts'] as $field => $data) {
        $data['table'] = $name;
        $VIEWS_SORTS_TITLES["$table[name].$field"] = $data['name'];
        $VIEWS_SORTS["$table[name].$field"] = $data;
      }
    }

  }

}

function _views_get_filters($titles = false) {
  global $VIEWS_FILTERS;
  global $VIEWS_FILTERS_TITLES;

  if (!$VIEWS_FILTERS) {
    _views_organize_data();
  }

  if (!$titles)
    return $VIEWS_FILTERS;
  else
    return $VIEWS_FILTERS_TITLES;
}

function _views_get_fields($titles = false) {
  global $VIEWS_FIELDS;
  global $VIEWS_FIELDS_TITLES;

  if (!$VIEWS_FIELDS) {
    _views_organize_data();
  }

  if (!$titles)
    return $VIEWS_FIELDS;
  else
    return $VIEWS_FIELDS_TITLES;
}

function _views_get_sorts($titles = false) {
  global $VIEWS_SORTS;
  global $VIEWS_SORTS_TITLES;

  if (!$VIEWS_SORTS) {
    _views_organize_data();
  }

  if (!$titles)
    return $VIEWS_SORTS;
  else
    return $VIEWS_SORTS_TITLES;
}

function _views_internal_default_views() {

  $view = new stdClass();
  $view->name = 'tracker/tracker';
  $view->description = 'Shows all new activity on system.';
  $view->title = 'recent posts';
  $view->use_pager = '1';
  $view->nodes_per_page = '25';
  $view->nodes_per_block = '10';
  $view->block_display_header = '0';
  $view->type = '2';
  $view->block = '1';
  $view->url = '3';
  $view->field = array (
    array (
      'tablename' => 'n',
      'field' => 'type',
      'label' => 'Type',
    ),
    array (
      'tablename' => 'n',
      'field' => 'title',
      'label' => 'Title',
      'handler' => 'views_handler_field_nodelink_with_mark',
    ),
    array (
      'tablename' => 'users',
      'field' => 'name',
      'label' => 'Author',
    ),
    array (
      'tablename' => 'node_comment_statistics',
      'field' => 'comment_count',
      'label' => 'Replies',
      'handler' => 'views_handler_comments_with_new',
    ),
    array (
      'tablename' => 'node_comment_statistics',
      'field' => 'last_comment_timestamp',
      'label' => 'Last Post',
      'handler' => 'views_handler_field_since',
    ),
  );
  $view->sort = array (
    array (
      'tablename' => 'node_comment_statistics',
      'field' => 'last_comment_timestamp',
      'sortorder' => 'DESC',
    ),
  );
  $view->argument = array (
    array (
      'type' => 'uid',
      'argdefault' => '2',
    ),
  );
  $view->filter = array (
    array (
      'tablename' => 'n',
      'field' => 'status',
      'operator' => '=',
      'value' => '1',
    ),
  );

  $views[$view->name] = $view;

  $view = new stdClass();
  $view->name = 'testblock';
  $view->title = 'Recent Articles';
  $view->description = 'Test of block override.';
  $view->use_pager = '1';
  $view->nodes_per_page = '10';
  $view->nodes_per_block = '5';
  $view->type = '1';
  $view->block = '1';
  $view->url = '2';
  $view->field = array (
    array (
      'tablename' => 'n',
      'field' => 'title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
    ),
  );
  $view->sort = array (
    array (
      'field' => 'created',
      'sortorder' => 'DESC',
      'tablename' => 'n',
    ),
  );
  $view->filter = array (
    array (
      'tablename' => 'n',
      'field' => 'status',
      'value' => '1',
      'operator' => '=',
    ),
    array (
      'tablename' => 'term_node',
      'field' => 'tid',
      'value' =>  array ( '11' ),
      'operator' => 'AND',
    ),
  );
  $views['testblock'] = $view;

  return $views;
}

function _views_get_default_views() {
  global $VIEWS_DEFAULT_VIEWS;

  if (!$VIEWS_DEFAULT_VIEWS) {
    $VIEWS_DEFAULT_VIEWS = array_merge(module_invoke_all('views_default_views'), _views_internal_default_views());
    foreach ($VIEWS_DEFAULT_VIEWS as $i => $view) {
      _views_check_arrays($VIEWS_DEFAULT_VIEWS[$i]); // so reference works.
      if (is_array($view->field)) {
        foreach($view->field as $j => $field) {
          $VIEWS_DEFAULT_VIEWS[$i]->field[$j]['fullname'] = "$field[tablename].$field[field]";
          $VIEWS_DEFAULT_VIEWS[$i]->field[$j]['queryname'] = "$field[tablename]_$field[field]";
        }
      }
      if (is_array($view->filter)) {
        foreach($view->filter as $j => $filter) {
          $VIEWS_DEFAULT_VIEWS[$i]->filter[$j]['field'] = "$filter[tablename].$filter[field]";
        }
      }
      if (is_array($view->sort)) {
        foreach($view->sort as $j => $sort) {
          $VIEWS_DEFAULT_VIEWS[$i]->sort[$j]['field'] = "$sort[tablename].$sort[field]";
        }
      }
    }
  }
  return $VIEWS_DEFAULT_VIEWS;
}
// ---------------------------------------------------------------------------
// Drupal Hooks


function views_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('The views module creates customized views of node lists.');
  }
}

function views_perm() {
  return array('administer views');
}

function views_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'admin/views', 
      'title' => t('views'),
      'callback' => 'views_admin_page',
      'access' => user_access('administer views'),
      'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'admin/views/add', 
      'title' => t('add view'),
      'callback' => 'views_admin_add_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/views/edit', 
      'title' => t('edit view'),
      'callback' => 'views_admin_edit_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/views/delete', 
      'title' => t('edit view'),
      'callback' => 'views_admin_delete_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'views', 
      'title' => t('add view'),
      'callback' => 'views_view_page',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $result = db_query("SELECT name, title FROM {view_view} WHERE url = 3");

    while ($view = db_fetch_object($result)) {
      $items[] = array('path' => "views/$view->name",
        'title' => $view->title,
        'callback' => 'views_view_page',
        'callback arguments' => array($view->name),
        'access' => user_access('access content'),
        'type' => MENU_NORMAL_ITEM);
    }
  }

  return $items;
}


function views_block($op = 'list', $delta = 0) {
  $block = array();
  if ($op == 'list') {
    $result = db_query("SELECT vid, title, name FROM {view_view} WHERE block = 1");
    while ($view = db_fetch_object($result)) {
      $block[$view->name]['info'] = $view->title;
    }
    $dviews = _views_get_default_views();
    foreach ($dviews as $name => $view) {
      if (!isset($block[$name]) && $view->block)
        $block[$name]['info'] = $view->title;
    }
    return $block;
  }
  else if ($op == 'view') {
    // Only display this block when the user is browsing a book:
    return views_view_block($delta);
  }
}

// ---------------------------------------------------------------------------
// Administrative Pages


function views_admin_page() {
  $numViews = 25;

  drupal_set_title("Administer views Views");

  $result = pager_query("SELECT vid, name, description, title FROM {view_view} ORDER BY name", $numViews);
  while ($view = db_fetch_object($result)) {
    $url = "views/$view->name";
    $items[] = array($view->title, $view->description, l($url, $url), theme_links(array(l('edit', "admin/views/edit/$view->vid"), l('delete', "admin/views/delete/$view->vid"))));
  }

  if ($items) {
    $output = theme('table', array('View', 'Description', 'URL', 'Actions'), $items, array("cellpadding" => "4"), "Existing Views");
    $output .= theme('pager', NULL, $numViews);
  }
  else {
    $output .= "<p>No views have currently been defined.</p>";
  }
  $output .= "<br>" . l('Add a view', 'admin/views/add') . "<br>";

  $output .= "<p>Below are system default views; if you edit one of these, a view will be created that will override any system use of the view.</p>";
  $items = array();
  $dviews = _views_get_default_views();

  foreach ($dviews as $view) {
    $url = "views/$view->name";
    $items[] = array($view->title, $view->description, l($url, $url), l('add', "admin/views/add/$view->name"));
  }

  if ($items) {
    $output .= theme('table', array('Default View', 'Description', 'URL', 'Actions'), $items, array("cellpadding" => "4"), "Default Views");
//    $output .= theme('pager', 2, $numViews);
  }
  else {
    $output .= "<p>No views have currently been defined.</p>";
  }
//  print theme('page', $output);
  return $output;
}

function views_edit_view_execute($form_id, $form) {
  $view = array2object($form);
  _views_save_view($view);
  menu_rebuild();
  if ($form['vid'])
    drupal_set_message("View successfully saved.");
  else
    drupal_set_message("View successfully added.");

  return drupal_goto('admin/views');
}

function views_admin_add_page($template = '') {
  $edit = $_POST['edit'];
  $op = $_POST['op'];

  if (is_array($edit))
    $edit = array2object($edit);

  if ($op == 'Cancel') {
    return drupal_goto('admin/views');
  }

  $view = _views_get_default_view($template);

  drupal_set_title(t('Add a View'));

  return _views_view_form($edit, $view, $op);
}

function views_admin_edit_page($vid = '') {
  $edit = $_POST['edit'];
  $op = $_POST['op'];

  if ($op == t('Cancel')) {
    return drupal_goto('admin/views');
  }

  if ($op == t('Delete')) {
    return drupal_goto("admin/views/delete/$vid");
  }

  if (is_array($edit)) {
    $edit = array2object($edit);
  }

  $view = _views_load_view($vid);

  if (!$view)
    return drupal_goto('admin/views');

  drupal_set_title(t('Edit View %n', array('%n' => $view->name)));

  return _views_view_form($edit, $view, $op);
}

function views_admin_delete_page($vid = '') {
  $view = _views_load_view($vid);

  if (!$view)
    return drupal_goto('admin/views');

  $form['vid'] = array('#type' => 'value', '#value' => $view->vid);
  return confirm_form('views_delete_confirm', $form,
    t('Are you sure you want to delete %title?', array('%title' => $view->name)), 
    $_GET['destination'] ? $_GET['destination'] : 'admin/views', 
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')  
  );
}

function views_delete_confirm_execute($formid, $form) {
  if ($form['confirm']) {
    _views_delete_view(array2object($form));
    drupal_goto('admin/views');
  }
}

function _views_get_default_view($template = '') {
  if ($template) {
    $dviews = _views_get_default_views();
    if (isset($dviews[$template])) {
      $view = $dviews[$template];
      return $view;
    }
  }
  
  $view->use_pager = 1;
  $view->nodes_per_page = variable_get('default_nodes_main', 10);
  $view->header_format = variable_get('filter_default_format', 1);
  $view->filter_published = 1;
  $view->url = 2;
  $view->vid = 0;
  _views_check_arrays($view);
  return $view;
}

function _views_check_arrays(&$view) {
  if (!is_array($view->field))
    $view->field = array();
  if (!is_array($view->sort))
    $view->sort = array();
  if (!is_array($view->argument))
    $view->argument = array();
  if (!is_array($view->breadcrumb))
    $view->breadcrumb = array();
  if (!is_array($view->filter))
    $view->filter = array();
}

function _views_swap(&$arr, $a, $b) {
  $temp = $arr[$a];
  $arr[$a] = $arr[$b];
  $arr[$b] = $temp;
}

function _views_move_up(&$arr, $i) {
  if ($i <= 0 || $i >= count($arr))
    return; // can't do it.
  _views_swap($arr, $i - 1, $i);
}

function _views_move_down(&$arr, $i) {
  if ($i >= count($arr) - 1 || $i < 0)
    return; // can't do it.
  _views_swap($arr, $i + 1, $i);
}

function _views_move_top(&$arr, $i) {
  if ($i <= 0 || $i >= count($arr))
    return; // can't do it.
  $temp = $arr[$i];
  for ($x = $i; $x > 0; $x--)
    $arr[$x] = $arr[$x - 1];
  $arr[0] = $temp;
}

function _views_move_bottom(&$arr, $i) {
  $end = count($arr) - 1;
  if ($i >= $end || $i < 0)
    return; // can't do it.
  $temp = $arr[$i];
  for ($x = $i; $x < $end; $x++)
    $arr[$x] = $arr[$x + 1];
  $arr[$end] = $temp;
}

function _views_check_sub_ops(&$view, $var) {
  foreach ($view->$var as $i => $obj) {
    if (!$obj['op'])
      continue;
    if ($obj['op'] == t('Delete')) {
      unset($view->{$var}[$i]);
      $view->$var = array_values($view->$var); // reindex
      return true;
    }
    else if ($obj['op'] == t('Up')) {
      _views_move_up($view->$var, $i);
      _views_move_up($_POST['edit'][$var], $i);
      return true;
    }
    else if ($obj['op'] == t('Down')) {
      _views_move_down($view->$var, $i);
      _views_move_down($_POST['edit'][$var], $i);
      return true;
    }
    else if ($obj['op'] == t('Top')) {
      _views_move_top($view->$var, $i);
      _views_move_top($_POST['edit'][$var], $i);
      return true;
    }
    else if ($obj['op'] == t('Bottom')) {
      _views_move_bottom($view->$var, $i);
      _views_move_bottom($_POST['edit'][$var], $i);
      return true;
    }
  }
  return false;
}

function _views_check_ops(&$view, $op) {
  if (!$op) {
    // Could probably use short circuiting here to make prettier
    $rc = _views_check_sub_ops($view, 'filter');
    if (!$rc) $rc = _views_check_sub_ops($view, 'sort');
    if (!$rc) $rc = _views_check_sub_ops($view, 'argument');
    if (!$rc) $rc = _views_check_sub_ops($view, 'field');
  }
  else if ($op == t("Add Filter")) {
    $filter['field'] = $view->add['filter'];
    $view->filter[] = $filter;
  }
  else if ($op == t("Add Criteria")) {
    $view->sort[] = $view->add['sort'];
  }
  else if ($op == t("Add Argument")) {
    $view->argument[] = $view->add['argument'];
  }
  else if ($op == t("Add Field")) {
    $fieldbits = explode('.', $view->add['field']);

    $newfield['fullname'] = $view->add['field'];
    $newfield['tablename'] = $fieldbits[0];
    $newfield['field'] = $fieldbits[1];
    $newfield['label'] = $fieldnames[$view->add['field']];
    $newfield['queryname'] = "$fieldbits[0]_$fieldbits[1]";
    $view->field[] = $newfield;
  }
}

function _views_view_form($view, $orig, $op = '') {
//  print "<pre>" . var_export($edit, true) . "</pre>";
  if ($view) {
    _views_check_arrays($view); // make sure arrays that might be empty get set
    _views_check_ops($view, $op);
    if ($orig->vid && $op != t('Save'))
      drupal_set_message("You have modified this view; changes will not be recorded until you Save the form.");
  }
  else
    $view = $orig;

  // Load some things we're going to need.
  $fields = _views_get_fields();
  $fieldnames = _views_get_fields(true); // for selecting

  $sortnames = _views_get_sorts(true); // for selecting

  $filters = _views_get_filters();
  $filternames = _views_get_filters(true);

  $arginfo = _views_get_arguments();

  
  $form['vid'] = array(
    '#type' => 'value',
    '#value' => $orig->vid,
  );
  $form['changed'] = array(
    '#type' => 'hidden',
    '#value' => $view->changed,
  );
//  $form['working'] = array(
//    '#type' => 'hidden',
//    '#value' => true,
//  );

  // DEBUGGING
//    $form .= "<pre>" . var_export($view, TRUE) . "</pre>";

$form['display'] = array(
  '#type' => 'fieldset',
  '#title' => t('Display'),
);

$form['display']['name'] = array(
  '#type' => 'textfield',
  '#title' => t('Name'),
  '#default_value' => $view->name,
  '#size' => 20,
  '#maxlength' => 32,
  '#description' => t('The name of the view. The URL of the view will be views/NAME. If a block, this will be the unique identifier for the block. Since this is a URL, please do not use spaces!'),
  '#attributes' => NULL,
  '#required' => true,
);
$form['display']['description'] = array(
  '#type' => 'textfield',
  '#title' => t('Description'),
  '#default_value' => $view->description,
  '#size' => 60,
  '#maxlength' => 255,
  '#description' => t('A description of the view for the admin list.'),
);

$form['display']['type'] = array(
  '#type' => 'select',
  '#title' => t('View Type'),
  '#default_value' => $view->type,
  '#options' => _views_types(),
  '#description' => t('How the nodes should be displayed to the user.'),
);

$form['display']['title'] = array(
  '#type' => 'textfield',
  '#title' => t('Title'),
  '#default_value' => $view->title,
  '#size' => 60,
  '#maxlength' => 255,
  '#description' => t('The title of the view will be shown at the top of the view. May be blank if not using a block.'),
);

$form['display']['header'] = array(
  '#type' => 'textarea',
  '#title' => t('Header'),
  '#default_value' => $view->header,
  '#cols' => 60,
  '#rows' => 6,
  '#description' => t('Text to display at the top of the view. May contain an explanation or links or whatever you like. Optional.'),
);

$form['display']['header_format'] = filter_form($view->header_format);


$form['block-info'] = array(
  '#type' => 'fieldset',
  '#title' => t('Block'),
);

$form['block-info']['block'] = array(
  '#type' => 'checkbox',
  '#title' => t('Provide Block'),
  '#return_value' => 1,
  '#default_value' => $view->block,
  '#description' => t('If checked this view will be provided as a block. If checked title may not be blank.'),
);

$form['block-info']['nodes_per_block'] = array(
  '#type' => 'textfield',
  '#title' => t('Nodes per Block'),
  '#default_value' => $view->nodes_per_block,
  '#size' => 2,
  '#maxlength' => 2,
  '#description' => t('If using a block, the maximum number of items to display in the block. Pagers are not used in blocks.'),
  '#attributes' => NULL,
);

$form['block-info']['block_display_header'] = array(
  '#type' => 'checkbox',
  '#title' => t('Display Header'),
  '#return_value' => 1,
  '#default_value' => $view->block_display_header,
  '#description' => t('If using a view as both a block and URL, display the header in the block?'),
);

$form['url-info'] = array(
  '#type' => 'fieldset',
  '#title' => t('URL and Pager'),
);

$form['url-info']['url'] = array(
  '#type' => 'select',
  '#title' => t('URL Type'),
  '#default_value' => $view->url,
  '#options' => _views_urls(),
  '#description' => t('Choose whether or not to provide a URL and a Menu entry for this view..'),
);
$form['url-info']['use_pager'] = array(
  '#type' => 'checkbox',
  '#title' => t('Use Pager'),
  '#return_value' => 1,
  '#default_value' => $view->use_pager,
  '#description' => t('If checked this query may be multiple pages. If not checked this query will be one page.'),
);
$form['url-info']['nodes_per_page'] = array(
  '#type' => 'textfield',
  '#title' => t('Nodes per Page'),
  '#default_value' => $view->nodes_per_page,
  '#size' => 2,
  '#maxlength' => 2,
  '#description' => t('The number of nodes to display per page. If 0 no nodes will be displayed. If not using a pager, this will be the maximum number of nodes in the list.'),
  '#attributes' => NULL,
  '#required' => true,
);

$form['add'] = array('#tree' => true);

// FIXME: Put in theme for markup.
//  $group = "<p>Fields in this section will appear in the table in this order, only if List Type above is set to Table.</p>\n";
//  $list = "";
  $form['field'] = array('#tree' => true);

  foreach ($view->field as $i => $field) {
    $fieldname = $field['fullname']; // combined table & fieldname
    $fieldinfo = $fields[$fieldname]; // laziness + readability

    $form['field'][$i] = array('#tree' => true);

    $form['field'][$i]['name'] = array(
      '#type' => 'markup',
      '#value' => $fieldinfo['name'], // combined table & fieldname
    );
    $form['field'][$i]['queryname'] = array(
      '#type' => 'hidden',
      '#value' => $field['queryname'],
    );
    $form['field'][$i]['tablename'] = array(
      '#type' => 'hidden',
      '#value' => $field['tablename'],
    );
    $form['field'][$i]['field'] = array(
      '#type' => 'hidden',
      '#value' => $field['field'],
    );
    $form['field'][$i]['fullname'] = array(
      '#type' => 'hidden',
      '#value' => $field['fullname'],
    );

    $form['field'][$i]['label'] = array(
      '#type' => 'textfield',
//      '#title' => t('Label'),
      '#default_value' => $field['label'],
      '#size' => 15,
      '#maxlength' => 25,
//      '#description' => t('The name displayed to the user.'),
    );

    if (is_array($fieldinfo['handler'])) {
      $form['field'][$i]['handler'] = array(
        '#type' => 'select',
//        '#title' => t('Handler'),
        '#default_value' => $field['handler'],
        '#options' => $fieldinfo['handler'],
      );
    }

    if ($fieldinfo['sortable']) {
      $form['field'][$i]['sortable'] = array(
        '#type' => 'select',
//        '#title' => t('Click sortable'),
        '#default_value' => $field['sortable'],
        '#options' => array('0' => t("No"), "1" => t("Yes")),
      );
      $form['field'][$i]['defaultsort'] = array(
        '#type' => 'select',
//        '#title' => t('Default Sorting'),
        '#default_value' => $field['defaultsort'],
        '#options' => array('0' => t("None"), "ASC" => t("Ascending"), "DESC" => t("Descending")),
//        '#description' => t('Only set one field to default sorting!'),
      );
    }
    $form['field'][$i]['delete'] = array(
      '#type' => 'submit',
      '#name' => "edit[field][$i][op]",
      '#value' => t("Delete"),
    );
    $form['field'][$i]['up'] = array(
      '#type' => 'submit',
      '#name' => "edit[field][$i][op]",
      '#value' => t("Up"),
    );
    $form['field'][$i]['down'] = array(
      '#type' => 'submit',
      '#name' => "edit[field][$i][op]",
      '#value' => t("Down"),
    );
    $form['field'][$i]['top'] = array(
      '#type' => 'submit',
      '#name' => "edit[field][$i][op]",
      '#value' => t("Top"),
    );
    $form['field'][$i]['bottom'] = array(
      '#type' => 'submit',
      '#name' => "edit[field][$i][op]",
      '#value' => t("Bottom"),
    );
  }

  $form['add']['field'] = array(
    '#type' => 'select',
//    '#title' => t('Add a Field'),
    '#default_value' => NULL,
    '#options' => $fieldnames,
  );
  $form['add']['fieldbutton'] = array(
    '#type' => 'button',
    '#value' => t("Add Field"),
  );

  $form['argument'] = array('#tree' => true);
  
  foreach ($view->argument as $i => $argument) {
    $form['argument'][$i] = array('#tree' => true);

    $form['argument'][$i]['type'] = array(
      '#type' => 'select',
//      '#title' => t("Argument $i"),
      '#default_value' => $argument['type'],
      '#options' => $arginfo['name'],
    );    
    $form['argument'][$i]['argdefault'] = array(
      '#type' => 'select',
//      '#title' => t("Argument $i Default"),
      '#default_value' => $argument['argdefault'],
      '#options' => _views_get_arguments_default(),
    );
    $form['argument'][$i]['delete'] = array(
      '#type' => 'button',
      '#name' => "edit[argument][$i][op]",
      '#value' => t("Delete"),
    );
    $form['argument'][$i]['up'] = array(
      '#type' => 'submit',
      '#name' => "edit[argument][$i][op]",
      '#value' => t("Up"),
    );
    $form['argument'][$i]['down'] = array(
      '#type' => 'submit',
      '#name' => "edit[argument][$i][op]",
      '#value' => t("Down"),
    );
    $form['argument'][$i]['top'] = array(
      '#type' => 'submit',
      '#name' => "edit[argument][$i][op]",
      '#value' => t("Top"),
    );
    $form['argument'][$i]['bottom'] = array(
      '#type' => 'submit',
      '#name' => "edit[argument][$i][op]",
      '#value' => t("Bottom"),
    );
  }
//  if (!$arggroup) theme should handle this.
//    $arggroup = "<p>This view does not accept arguments</p>";

  $form['add']['argument'] = array('#tree' => true);

  $form['add']['argument']['type'] = array(
    '#type' => 'select',
//    '#title' => t('Argument'),
    '#default_value' => NULL,
    '#options' => $arginfo['name'],
//    '#description' => t('If using a URL and you want it to accept arguments, this is how to parse the argument. For example, "views/VIEWNAME/1" could produce nodes authored by User ID #1 if this field is set to User ID. It can accept multiple, successive arguments, but be careful that they make sense together!'),
  );
  $form['add']['argument']['argdefault'] = array(
    '#type' => 'select',
//    '#title' => t('Argument Default'),
    '#default_value' => NULL,
    '#options' => _views_get_arguments_default(),
//    '#description' => t('What action to take if the argument is not given in URL.'),
  );
  $form['add']['argbutton'] = array(
    '#type' => 'button',
    '#value' => t("Add Argument"),
  );


  $form['filter'] = array('#tree' => true);

  foreach ($view->filter as $i => $filter) {
    $filtername = $filter['field']; // combined table & filtername
    $filterinfo = $filters[$filtername];

    $form['filter'][$i] = array('#tree' => true);

    $form['filter'][$i]['name'] = array(
      '#type' => 'markup',
      '#value' => $filterinfo['name'],
    );

    $form['filter'][$i]['field'] = array(
      '#type' => 'hidden',
      '#value' => $filter['field'],
    );

    // 'operator' is either an array or a handler
    $operator = $filterinfo['operator'];
    if (!is_array($operator) && function_exists($filterinfo['operator'])) 
      $operator = $filterinfo['operator']('operator', $filterinfo);

    $form['filter'][$i]['operator'] = array(
      '#type' => 'select',
      '#default_value' => $filter['operator'],
      '#options' => $operator,
    );

    if ($filterinfo['list']) {
      $list = $filterinfo['list'];

      if (!is_array($list) && function_exists($filterinfo['list'])) 
        $list = $filterinfo['list']('list', $filterinfo);

      $multiple = false;
      switch($filterinfo['list-type']) {
        case 'checkbox':
          $form['filter'][$i]['value'] = array(
            '#type' => 'checkboxes',
//            '#title' => t('Value'),
            '#default_value' => $filter['value'],
            '#options' => $list,
          );
          break;
        case 'list':
        default:
          $multiple = true;
          // no break, fall thru
        case 'select':
          $form['filter'][$i]['value'] = array(
            '#type' => 'select',
//            '#title' => t('Value'),
            '#default_value' => $filter['value'],
            '#options' => $list,
            '#multiple' => $multiple,
          );
          break;
      }
    }
    else {
      if ($filterinfo['transform'] && function_exists($filterinfo['transform'])) {
        $filter['value'] = $filterinfo['transform']('out', $filter['value'], $filterinfo);
      }
      $form['filter'][$i]['value'] = array(
        '#type' => 'textfield',
//        '#title' => t('Value'),
        '#default_value' => $filter['value'],
        '#size' => 20,
        '#maxlength' => 255,
      );
    }
    $form['filter'][$i]['delete'] = array(
      '#type' => 'button',
      '#name' => "edit[filter][$i][op]",
      '#value' => t("Delete"),
    );
    $form['filter'][$i]['up'] = array(
      '#type' => 'submit',
      '#name' => "edit[filter][$i][op]",
      '#value' => t("Up"),
    );
    $form['filter'][$i]['down'] = array(
      '#type' => 'submit',
      '#name' => "edit[filter][$i][op]",
      '#value' => t("Down"),
    );
    $form['filter'][$i]['top'] = array(
      '#type' => 'submit',
      '#name' => "edit[filter][$i][op]",
      '#value' => t("Top"),
    );
    $form['filter'][$i]['bottom'] = array(
      '#type' => 'submit',
      '#name' => "edit[filter][$i][op]",
      '#value' => t("Bottom"),
    );
  }

//  if (!$group) {
//    $group = "<p>No filtering Criteria Specified</p>";
//  }

  $form['add']['filter'] = array(
    '#type' => 'select',
//    '#title' => t("Filter"),
    '#default_value' => NULL,
    '#options' => $filternames,
  );
  $form['add']['filterbutton'] = array(
    '#type' => 'button',
    '#value' => t("Add Filter"),
  );

  $form['sort'] = array('#tree' => true);
  foreach ($view->sort as $i => $sort) {
    $form['sort'][$i] = array('#tree' => true);
    $form['sort'][$i]['field'] = array(
      '#type' => 'select',
      '#title' => NULL,
      '#default_value' => $sort['field'],
      '#options' => $sortnames,
    );
    $form['sort'][$i]['sortorder'] = array(
      '#type' => 'select',
      '#title' => NULL,
      '#default_value' => $sort['sortorder'],
      '#options' => _views_sortorders(),
    );
    $form['sort'][$i]['delete'] = array(
      '#type' => 'button',
      '#name' => "edit[sort][$i][op]",
      '#value' => t("Delete"),
    );
    $form['sort'][$i]['up'] = array(
      '#type' => 'submit',
      '#name' => "edit[sort][$i][op]",
      '#value' => t("Up"),
    );
    $form['sort'][$i]['down'] = array(
      '#type' => 'submit',
      '#name' => "edit[sort][$i][op]",
      '#value' => t("Down"),
    );
    $form['sort'][$i]['top'] = array(
      '#type' => 'submit',
      '#name' => "edit[sort][$i][op]",
      '#value' => t("Top"),
    );
    $form['sort'][$i]['bottom'] = array(
      '#type' => 'submit',
      '#name' => "edit[sort][$i][op]",
      '#value' => t("Bottom"),
    );
  }

//  if (!$group) {
//    $group = "<p>No Sorting Criteria Specified</p>";
//  }

  $form['add']['sort']['#tree'] = true;
  $form['add']['sort']['field'] = array(
    '#type' => 'select',
//    '#title' => t("Add Criteria"),
    '#default_value' => NULL,
    '#options' => $sortnames,
  );
  $form['add']['sort']['sortorder'] = array(
    '#type' => 'select',
//    '#title' => t("Order"),
    '#default_value' => NULL,
    '#options' => _views_sortorders(),
  );
  $form['add']['sortbutton'] = array(
    '#type' => 'button',
    '#value' => t("Add Criteria"),
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t("Save"),
  );
  if ($orig->vid)
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t("Delete"),
    );
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t("Cancel"),
  );
  
  return drupal_get_form('views_edit_view', $form);
}

function theme_views_edit_view($form) {
//  print "<pre>" . var_export($form, true) . "</pre>";

  $output .= form_render($form['display']);
  $output .= form_render($form['block-info']);
  $output .= form_render($form['url-info']);

  // form_render wants a reference so use full array notation.

  $rows = array();
  foreach ($form['field'] as $i => $field) {
    if (is_numeric($i))
      $rows[] = array(
        form_render($form['field'][$i]['name']),
        form_render($form['field'][$i]['label']),
        form_render($form['field'][$i]['handler']),
        form_render($form['field'][$i]['sortable']),
        form_render($form['field'][$i]['defaultsort']),
        form_render($form['field'][$i]['delete']),
        form_render($form['field'][$i]['up']),
        form_render($form['field'][$i]['down']),
        form_render($form['field'][$i]['top']),
        form_render($form['field'][$i]['bottom']),
      );
  }
  if (!$rows)
    $rows[] = array(array('data' => "This view currently has no fields defined.", 'colspan' => 6));
  
  $group .= theme('table', array('Name', 'Label', 'Handler', 'Sortable', 'Default Sort', array(data =>'Ops', colspan=>'6')), $rows);

  $rows = array(
    array(
      form_render($form['add']['field']),
      form_render($form['add']['fieldbutton']),
    )
  );
  $group .= "<br/>";
  $group .= theme('table', array(array('data' => t('Add Field'), 'colspan' => 3)), $rows);
  $group .= "<p>Fields are only meaningful with List view and Table View; they allow you to choose which fields are presented and in what order.</p>";
  $output .= theme('fieldset', array('#title' => t('Fields'), '#children' => $group));
  $group = "";

  $rows = array();
  foreach ($form['argument'] as $i => $argument) {
    if (is_numeric($i))
      $rows[] = array(
        form_render($form['argument'][$i]['type']),
        form_render($form['argument'][$i]['argdefault']),
        form_render($form['argument'][$i]['delete']),
        form_render($form['argument'][$i]['up']),
        form_render($form['argument'][$i]['down']),
        form_render($form['argument'][$i]['top']),
        form_render($form['argument'][$i]['bottom']),
      );
  }
  if (!$rows)
    $rows[] = array(array('data' => "This view currently has no arguments defined.", 'colspan' => 3));

  $group .= theme('table', array('Argument Type', 'Default', array(data =>'Ops', colspan=>'6')), $rows);

  $rows = array(
    array(
      form_render($form['add']['argument']['type']),
      form_render($form['add']['argument']['argdefault']),
      form_render($form['add']['argbutton']),
    )
  );
  $group .= "<br/>";
  $group .= theme('table', array(t('Add Argument'), array('data' => t('Default'), 'colspan' => 3)), $rows);
  $group .= "<p>Arguments are parsed directly from the URL. They are not necessary to any given view, but allow flexibility.</p>";
  $output .= theme('fieldset', array('#title' => t('Arguments'), '#children' => $group));
  $group = "";

  $rows = array();
  foreach ($form['filter'] as $i => $filter) {
    if (is_numeric($i))
      $rows[] = array(
        form_render($form['filter'][$i]['name']),
        form_render($form['filter'][$i]['operator']),
        form_render($form['filter'][$i]['value']),
        form_render($form['filter'][$i]['delete']),
        form_render($form['filter'][$i]['up']),
        form_render($form['filter'][$i]['down']),
        form_render($form['filter'][$i]['top']),
        form_render($form['filter'][$i]['bottom']),
      );
  }
  if (!$rows)
    $rows[] = array(array('data' => "This view currently has no filters defined.", 'colspan' => 3));

  $group .= theme('table', array('Field', 'Operator', 'Value', array(data =>'Ops', colspan=>'6')), $rows);

  $rows = array(
    array(
      form_render($form['add']['filter']),
      form_render($form['add']['filterbutton']),
    )
  );
  $group .= "<br/>";
  $group .= theme('table', array(array('data' => t('Add Filter'), 'colspan' => 3)), $rows);
  $group .= "<p>Filters allow you to select a subset of all the nodes to display. All Filters are ANDed together.</p>";
  $output .= theme('fieldset', array('#title' => t('Filters'), '#children' => $group));
  $group = "";

  $rows = array();
  foreach ($form['sort'] as $i => $sort) {
    if (is_numeric($i))
      $rows[] = array(
        form_render($form['sort'][$i]['field']),
        form_render($form['sort'][$i]['sortorder']),
        form_render($form['sort'][$i]['delete']),
        form_render($form['sort'][$i]['up']),
        form_render($form['sort'][$i]['down']),
        form_render($form['sort'][$i]['top']),
        form_render($form['sort'][$i]['bottom']),
      );
  }
  if (!$rows)
    $rows[] = array(array('data' => "This view currently has no sort criteria defined.", 'colspan' => 3));

  $group .= theme('table', array('Field', 'Order', array(data =>'Ops', colspan=>'6')), $rows);

  $rows = array(
    array(
      form_render($form['add']['sort']['field']),
      form_render($form['add']['sort']['sortorder']),
      form_render($form['add']['sortbutton']),
    )
  );
  $group .= "<br/>";
  $group .= theme('table', array(array('data' => t('Add Sort Criteria'), 'colspan' => 3)), $rows);
  $output .= theme('fieldset', array('#title' => t('Sort Criteria'), '#children' => $group));
  $group = "";

  $output .= form_render($form);
  return $output;
}

/*
function _views_delete_form($view) {
  // FIXME: Use confirm_form() instead of this!!
  $form['vid'] = array(
    '#type' => 'value',
    '#value' => $view->vid,
  );

  $form['text'] .= array('#value' => "<p>Really delete view '$view->name'?</p>");
  $form[] = array(
    '#type' => 'submit',
    '#value' => 'Really Delete',
  );

  return drupal_get_form('views_delete_view_form', $form);
}
*/

function views_edit_view_validate($form_id, $view) {
//  print "<pre>" . var_export($view, true) . "</pre>";
  $filters = _views_get_filters();
  _views_check_arrays($view);
  
  $op = $_POST['op'];

  if ($op != t('Save')) {
    return; // only validate on saving!
  }

  if ($view['vid']) {
    $changed = db_result(db_query("SELECT changed FROM {view_view} WHERE vid = $view[vid]"));
    if ($changed && $view['changed'] != $changed) {
      form_set_error('', "Another user has modified this view, unable to save. You can get this error by using the Back button to re-edit a view after saving one; if you do this, be sure to Reload before making any changes!");
      return;
    }
  }

  if (is_array($view['filter'])) foreach ($view['filter'] as $i => $filter) {
    $filterinfo = $filters[$filter['field']]; // shortcut
    if ($filterinfo['transform'] && function_exists($filterinfo['transform'])) {
      $filter['value'] = $filterinfo['transform']('in', $filter['value'], $filterinfo);
    }
    if ($filterinfo['validate'] && function_exists($filterinfo['validate'])) {
      if ($rc = $filterinfo['validate']('validate', $filter['value'], $filterinfo)) {
        $validfilter = false;
        form_set_error("filter][$i][value", $rc);
      }
    }
  }
  
  if ($view['use_block'] && !$view['title']) {
    form_set_error('title', "If being used as a block, title may not be blank.");
  }

  if (!$view['name']) {
    form_set_error('name', "View name is required.");
  }

  // test uniqueness of name
  $vid = db_result(db_query("SELECT vid FROM {view_view} WHERE name='%s'", $view['name']));
  if ($vid && $vid != $view['vid']) {
    form_set_error('name', "View name already in use.");
  }


  if ($view['use_block'] && $view['nodes_per_block'] < 1) {
    form_set_error('nodes_per_block', "If being used as a block, Nodes Per Block must be positive.");
  }
/*
  if ($view['type'] == 2 || $view['type'] == 1 && !count($view['field'])) { // "Table" 
    form_set_error('add][field', "You must select what fields to display when using type 'Table'!");
  }
*/
}


// ---------------------------------------------------------------------------
// View Construction

function _views_get_view($viewname) {
  $view = _views_load_view($viewname);
  if ($view)
    return $view;

  if (is_int($viewname))
    return; // don't bother looking if viewname is an int!

  $dviews = _views_get_default_views();

  if (isset($dviews[$viewname]))
    return $dviews[$viewname];

}

function views_view_page() {
  $args = func_get_args();
  while ($next = array_shift($args)) {
    if (!$viewname)
      $viewname = $next;
    else
      $viewname .= "/$next";
    if ($view = _views_get_view($viewname))
      break;
  }
  if (!$view)
    return drupal_not_found();

  if ($view->url == 1)
    return drupal_not_found();

  // Done before theming so theme can change it if it wants.
  drupal_set_title($view->title);

  $output = views_view('page', $view, $args);
//  print theme('page', $output);
  return $output;
}

function views_view_block($vid) {
  $view = _views_get_view($vid);

  if (!$view || !$view->block)
    return NULL;

  $block['content'] = views_view('block', $view, $args);
  $block['subject'] = $view->title;
  return $block;
}

function _views_build_query(&$view, $args = array()) {
  $query = new _views_query();

  // Process static filters
  _views_view_build_filters($query, $view);
  
  // Process arguments.
  foreach ($view->argument as $i => $argument) {
    if ($args[$i]) {
      _views_view_build_arg($query, $args[$i], $argument['type']);
    }
    else { 
      // This is what we do if we expected an arg but we didn't get it.
      switch ($argument['argdefault']) {
        case 1:
          return drupal_not_found();
        case 3:
          $level = $i;
          _views_build_summary($query, $argument['type']);
          $summary = true;
          break 2; // switch and for
      } 
    } 
  }

  if (!$summary) {
    _views_view_build_sorts($query, $view);
    if ($view->type == 1 || $view->type == 2) { // list (1) or table (2)
      $fields = _views_get_fields(); 

      foreach($view->field as $field) {
        // Some fields are not actually fields but require special handlers
        // to display their data.
        if (!$field['notafield'])
          $query->add_field($field['field'], $field['tablename'], $field['queryname']);
        // special handling
        if (is_array($fields[$field['fullname']]['addlfields'])) {
          foreach($fields[$field['fullname']]['addlfields'] as $name) 
            $query->add_field($name, $field['tablename'], "$field[tablename]_$name");
        }
      }
      if ($view->type == 2) { // table only
        $view->table_header = _views_construct_header($view, $fields);
        $query->set_header($view->table_header);
      }
    }
  }

  $info['sql'] = $query->query();
  $info['countsql'] = $query->query(true);
  $info['summary'] = $summary;
  $info['level'] = $level;

  // DEBUG
//  print "<pre>" . var_export($view, TRUE) . "</pre>";
//  $output .= "<pre>" . var_export($args, TRUE) . "</pre>";
// print "<pre>" . var_export($query, TRUE) . "</pre>";
//  $output .= "<table width=800px><tr><td>$sql</table>";

  return $info;

}

function views_view($type, $view, $args = array()) {

  if ($view->sql) {
    $info['sql'] = $view->sql;
    $info['countsql'] = $view->countsql;
    if ($view->type == 2)  // table only
      $view->table_header = _views_construct_header($view, $fields);
  }
  else {
    $info = _views_build_query($view, $args);
  }

  $sql = db_rewrite_sql($info['sql']);

  $use_pager = ($type == 'page' && $view->use_pager);

  if ($view->type == 5 || $view->type == 6) {
    $csql = db_rewrite_sql($info['countsql'], 'n', 'numrecs');
    $count = db_result(db_query($csql));
    $which = rand(0, $count - 1);
    $result = db_query_range($sql, $which, 1);
  }
  else if ($use_pager) {
    $csql = db_rewrite_sql($info['countsql'], 'n', 'numrecs');
    $result = pager_query($sql, $view->nodes_per_page, 0, $csql);
  }

  else {
    $limit = ($type == 'page') ? $view->nodes_per_page : $view->nodes_per_block;
    if ($limit)
      $result = db_query_range($sql, 0, $limit);
    else
      $result = db_query($sql);
  }

  $items = array();
  while ($item = db_fetch_object($result)) {
    $items[] = $item;
  }
  // DEBUG
//  $output = "<pre>" . var_export($items, true) . "</pre>";

  if ($info['summary']) {
    $out .= theme("views_summary_$view->name", $view, $type, $info['level'], $items);
    if ($out)
      $output .= $out;
    else
      $output .= theme('views_summary', $view, $type, $info['level'], $items);
  }
  else {
    $output .= theme("views_view_$view->name", $view, $type, $items);
    if (!$output)
      $output .= theme('views_view', $view, $type, $items);

  }

  if ($type == 'page' && $view->use_pager) {
    if ($view->table_header && !$info['summary'])
      $output .= theme('pager', NULL, $view->nodes_per_page, 0, tablesort_pager());
    else
      $output .= theme('pager', NULL, $view->nodes_per_page, 0);
  }
  return $output;
}

function _views_view_build_filters(&$query, $view) {
  $filters = _views_get_filters();

  foreach ($view->filter as $i => $filter) {
    $filterinfo = $filters[$filter['field']]; // shortcut
    $field = $filterinfo['field'];
    if (!$field) {
      $fieldbits = explode('.', $filter['field']);
      $field = $fieldbits[1];
    }

    $table = $filterinfo['table'];
//    $table = 'x';

    if (is_array($filter['value'])) {
      if ($filter['operator'] == 'OR' || $filter['operator'] == 'NOR') {
        $not = '';
        if ($filter['operator'] == 'NOR')
          $not = "NOT";
        $query->ensure_table($table);
        $query->add_where("$table.$field $not IN ('" . implode("','", $filter['value']) . "')");
      }
      else {
        $howmany = count($filter['value']);
        $high_table = $query->add_table($table, true, $howmany);
        if (!$high_table) // couldn't add the table
          break;

        $table_num = $high_table - $howmany;
        foreach ($filter['value'] as $item) {
          $table_num++;
          $tn = $query->get_table_name($table, $table_num);
          $query->add_where("$tn.$field = '$item'");
        }
      }
    }
    else {
      if (function_exists($filterinfo['custom'])) {
        $filterinfo['custom']('custom', $filter, $filterinfo, $query);
      }
      else {
        $query->ensure_table("$table");
        $query->add_where("$table.$field $filter[operator] '$filter[value]'");
      }
    }
  }

}

function _views_view_build_arg(&$query, $arg, $argtype) {
  $arginfo = _views_get_arguments();
  if (!function_exists($arginfo['handler'][$argtype]))
    return false;

  // call the handler
  $arginfo['handler'][$argtype]('filter', $query, $argtype, $arg);
  
}

function _views_view_build_sorts(&$query, $view) {
  $sorts = _views_get_sorts();

  foreach ($view->sort as $i => $sort) {
    $field = $sorts[$sort['field']]['field'];
    if (!$field) {
      $fieldbits = explode('.', $sort['field']);
      $field = $fieldbits[1];
    }

    $table = $sorts[$sort['field']]['table'];
    if (is_array($field)) {
      foreach($field as $f) {
        $query->add_orderby($table, $f, $sort['sortorder']);
      }
    }
    else {
      $query->add_orderby($table, $field, $sort['sortorder']);
    }
  }
}

function _views_get_timezone() {
  global $user;
  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else {
    $timezone = variable_get('date_default_timezone', 0);
  }

  return $timezone;
}

function _views_build_summary(&$query, $argtype) {

  $arginfo = _views_get_arguments();
  if (!function_exists($arginfo['handler'][$argtype]))
    return false;

  $query->clear_fields();

  $fieldinfo = $arginfo['handler'][$argtype]('fields', $query, $argtype);

  if ($fieldinfo['fieldname'])
    $query->add_field("$fieldinfo[field] AS $fieldinfo[fieldname]", '');
  $query->add_field("count(n.nid) as num_nodes", '');
  $query->add_groupby("$fieldinfo[field]");
  $query->set_count_field("DISTINCT($fieldinfo[field])");
}

function _views_is_cacheable(&$view) {
  // views with arguments are immediately not cacheable.
  if (!empty($view->argument))
    return false;

  $filters = _views_get_filters();

  foreach ($view->filter as $i => $filter) {
    if ($filters[$filter['field']]['cacheable'] == 'no') 
      return false;
  }
  return true;
}

// ---------------------------------------------------------------------------
// Query construction object

class _views_query {

  function _views_query() {
    $this->where = "";
    $this->orderby = "";
    $this->groupby = "";
    $this->tables = array();
    $this->field = array("n.nid");
    $this->table_data = _views_get_tables();
    $this->count_field = "*";
    $this->header = array();
  }

  function add_field($field, $table = 'n', $alias = '') {
    if ($table) {
      if ($table && $table != 'n') {
        $this->ensure_path($table);
        if (!$this->tables[$table])
          $this->tables[$table] = 1;
      }
      $table .= ".";
    }
    if ($alias)
      $a = " AS $alias";
    $this->field[] = "$table$field$a";
  }

  function clear_fields() {
    $this->field = array();
  }

  function set_count_field($field) {
    $this->count_field = $field;
  }

  function add_where($clause) {
    if (!$this->where)
      $this->where = "WHERE " . $clause;
    else
      $this->where .= " AND " . $clause;
  }

  function add_orderby($table, $field, $order) {
    if (!$this->tables[$table])
      $this->add_table($table, true);

		if ($this->orderby)
			$this->orderby .= ", ";

		$this->orderby = " $table.$field $order";
  }

  function add_groupby($clause) {
    if (!$this->groupby)
      $this->groupby = "GROUP BY " . $clause;
    else
      $this->groupby .= ", " . $clause;
  }

  function ensure_table($table) {
    if ($table == 'n' || $table == 'node')
      return;
    if ($this->tables[$table])
      return;

    if ($this->ensure_path($table))
      $this->tables[$table] = 1;
  }

  function add_table($table, $ensure_path = false, $howmany = 1) {
    if ($table == 'n' || $table == 'node')
      return;

    if ($ensure_path) 
      if (!$this->ensure_path($table))
        return false;
      if (!$this->trace($table))
        return false;

    if (isset($this->tables[$table]))
      $this->tables[$table] += $howmany;
    else
      $this->tables[$table] = $howmany;
    return $this->tables[$table];
  }

  function set_header($header) {
    $this->header = $header;
  }

// One of those times where recursion isn't evil. Go me!
  function trace($table, $traced = array()) {
    if ($table == 'n' || $table == 'node')
      return true;

    $left_table = $this->table_data[$table]['join']['left']['table'];

    // Does it end at 'node'?
    if ($left_table == 'node')
      return true;

    // Have we been this way?
    if (isset($traced[$left_table]))
      return false;

    // Keep looking.
    $traced[$left_table] = 1;
    return $this->trace($left_table, $traced);
  }

  // because we're just making sure the linkages are ok,
  // just put the table in. However, we don't do it until
  // last in case there's a bad loop or something.
  function ensure_path($table, $traced = array(), $add = array()) {
    if ($table == 'n' || $table == 'node')
      return true;
    $left_table = $this->table_data[$table]['join']['left']['table'];

    // Does it end at 'node'?
    if ($left_table == 'node') {
      // We are done! Add our tables and unwind.
      foreach ($add as $t) {
        // Don't use add_table because it'll trace, and we already did that.
        // And we already know anything in $add isn't already in $this->tables
        $this->tables[$table] = 1;
      }
      return true;
    }

    // Have we been this way?
    if (isset($traced[$left_table])) {
      // we looped. Broked.
      return false;
    }

    // Do we have to add this table?
    if (!isset($this->tables[$left_table]))
      $add[] = $left_table;

    // Keep looking.
    $traced[$left_table] = 1;
    return $this->ensure_path($left_table, $traced, $add);
  }

  function get_table_name($table, $table_num) {
    if ($table_num < 2)
      return $table;
    else
      return $table . $table_num;
  }

  // At this time this handles only numeric arguments.
  function add_complex_filter($table, $field, $arg) {
    $res = _views_break_phrase($arg);
    $cmp = $res[0];
    $tids = $res[1];

    if ($cmp == 'or') {
      $table_num = $this->add_table($table, true); // ensure path
      $tn = $this->get_table_name($table, $table_num);
      if (!$tn) // couldn't add the table
        return;
      $this->add_where("$tn.$field in (" . implode(',', $tids) . ")");
    }
    else {
      $howmany = count($tids);
      $high_table = $this->add_table($table, true, $howmany);
      if (!$high_table) // couldn't add the table
        return;

      $table_num = $high_table - $howmany;
      foreach ($tids as $tid) {
        $table_num++;
        $tn = $this->get_table_name($table, $table_num);
        $this->add_where("$tn.$field = $tid");
      }
    }
  }
/*
  function add_complex_sort($table, $field, $order) {
    // We don't really care which table we use, so
    // only add if the table's not in there.
    if (!$this->tables[$table])
      $this->add_table($table, true);
    $this->add_orderby("$table.$field", $order);
  }
*/
  function query($getcount = false) {
    foreach ($this->tables as $table => $count) {
      foreach (range(1, $count) as $i) {
        $tn = $this->get_table_name($table, $i);
//        if ($i != 1)
//          $tnas = " $tn";
//        else
//          $tnas = " $table";

        $ltable = $this->table_data[$table]['join']['left']['table'];
        $lfield = $this->table_data[$table]['join']['left']['field'];
        $rfield = $this->table_data[$table]['join']['right']['field'];
        // special case for node table
        if ($ltable == 'node')
          $ltable = 'n'; 
        $joins .= " LEFT JOIN \{$table} $tn ON $ltable.$lfield = $tn.$rfield";
      }
    }
    if (!$getcount) {
      foreach($this->field as $field) {
        if (!$fields)
          $fields = $field;
        else
          $fields .= ", $field";
      }
      $groupby = $this->groupby;
    }
    else
      $fields = "count($this->count_field) as numrecs";

    if ($this->table_header) {
      if ($this->orderby)
        $before = "$this->orderby, ";
      $orderby = tablesort_sql($this->header, $before);
    }
    else if ($this->orderby)
      $orderby = "ORDER BY $this->orderby";

    return "SELECT $fields FROM {node} n $joins $this->where $groupby $orderby";
  }
}


// ---------------------------------------------------------------------------
// Utility

// Cribbed from taxonomy. Only works for numeric arguments.
function _views_break_phrase($str) {
  if (preg_match('/^([0-9]+[+ ])+[0-9]+$/', $str)) {
    // The '+' character in a query string may be parsed as ' '.
    return array('or', preg_split('/[+ ]/', $str));
  }
  else if (preg_match('/^([0-9]+,)*[0-9]+$/', $str)) {
    return array('and', explode(',', $str));
  }
  else {
    return NULL;
  }
}

// ---------------------------------------------------------------------------
// Database functions

function _views_view_fields() {
  return array('vid', 'name', 'description', 'title', 'header', 'header_format', 'use_pager', 'nodes_per_page', 'nodes_per_block', 'block_display_header', 'type', 'block', 'url', 'changed', 'sql', 'countsql');
}

function _views_delete_view($view) {
  $view->vid = intval($view->vid);
  if (!$view->vid)
    return;

  db_query("DELETE FROM {view_view} where vid=$view->vid");
  db_query("DELETE FROM {view_sort} where vid=$view->vid");
}

function _views_load_view($arg) {

  if (intval($arg) == 0)
    $where = "v.name = '$arg'";
  else
    $where = "v.vid =  $arg";
  $view = db_fetch_object(db_query("SELECT v.* as filter_author_name FROM {view_view} v WHERE $where"));

  if (!$view->name)
    return NULL;

  // load the sorting criteria too.
  $result = db_query("SELECT * FROM {view_sort} vs WHERE vid = $view->vid ORDER BY position ASC");

  $view->sort = array();
  while ($sort = db_fetch_array($result)) {
    $view->sort[] = $sort;
  }

  $result = db_query("SELECT * FROM {view_argument} WHERE vid = $view->vid ORDER BY position ASC");

  $view->argument = array();
  while ($arg = db_fetch_array($result)) {
    $view->argument[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_tablefield} WHERE vid = $view->vid ORDER BY position ASC");

  $view->field = array();
  while ($arg = db_fetch_array($result)) {
    $arg['fullname'] = "$arg[tablename].$arg[field]";
    $arg['queryname'] = "$arg[tablename]_$arg[field]";
    $view->field[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_breadcrumb} WHERE vid = $view->vid ORDER BY position ASC");

  $view->breadcrumb = array();
  while ($arg = db_fetch_array($result)) {
    $view->breadcrumb[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_filter} WHERE vid = $view->vid ORDER BY position ASC");

  $view->filter = array();
  while ($arg = db_fetch_array($result)) {
    if ($arg['operator'] == 'AND' || $arg['operator'] == 'OR' || $arg['operator'] == 'NOR')
      $arg['value'] = explode(',', $arg['value']);
    $view->filter[] = $arg;
  }

  return $view;
}

function _views_save_view($view) {
  _views_check_arrays($view);

  // cache the query
  if (_views_is_cacheable($view)) {
    $info = _views_build_query($view);
    $view->sql = $info['sql'];
    $view->countsql = $info['countsql'];
  }

  // collapse arrays
  if (is_array($view->filter_nodetypes))
    $view->filter_nodetypes = implode(', ', $view->filter_nodetypes);
  else
    $view->filter_nodetypes = '';

  $view->changed = time();
  $fields = _views_view_fields();
  if ($view->vid) {
    // update
    // Prepare the query:
    foreach ($view as $key => $value) {
      if (in_array($key, $fields)) {
        $q[] = db_escape_string($key) ." = '%s'";
        $v[] = $value;
      }
    }

    // Update the view in the database:
    db_query("UPDATE {view_view} SET ". implode(', ', $q) ." WHERE vid = '$view->vid'", $v);
    db_query("DELETE from {view_sort} WHERE vid='$view->vid'");
    db_query("DELETE from {view_argument} WHERE vid='$view->vid'");
    db_query("DELETE from {view_tablefield} WHERE vid='$view->vid'");
    db_query("DELETE from {view_breadcrumb} WHERE vid='$view->vid'");
    db_query("DELETE from {view_filter} WHERE vid='$view->vid'");
  }
  else {
    // insert

    // This method really saves on typos, and makes it a lot easier to add fields
    // later on.
    $view->vid = db_next_id('{view_view}_vid');

    // Prepare the query:
    foreach ($view as $key => $value) {
      if (in_array((string) $key, $fields)) {
        $k[] = db_escape_string($key);
        $v[] = $value;
        $s[] = "'%s'";
      }
    }

    db_query("INSERT INTO {view_view} (". implode(", ", $k) .") VALUES (". implode(", ", $s) .")", $v);
  }

  foreach ($view->sort as $i => $sort) {
    db_query("INSERT INTO {view_sort} (vid, position, field, sortorder) VALUES ($view->vid, $i, '$sort[field]', '$sort[sortorder]')");
  }

  foreach ($view->argument as $i => $arg) {
    db_query("INSERT INTO {view_argument} (vid, type, argdefault, position) VALUES ($view->vid, '$arg[type]', '$arg[argdefault]', $i)");
  }

  foreach ($view->field as $i => $arg) {
    db_query("INSERT INTO {view_tablefield} (vid, tablename, field, label, handler, sortable, defaultsort, position) VALUES ($view->vid, '$arg[tablename]', '$arg[field]', '$arg[label]', '$arg[handler]', '$arg[sortable]', '$arg[defaultsort]', $i)");
  }

  foreach ($view->breadcrumb as $i => $arg) {
    db_query("INSERT INTO {view_breadcrumb} (vid, title, link, position) VALUES ($view->vid, '$arg[title]', '$arg[link]', $i)");
  }

  foreach ($view->filter as $i => $arg) {
    if (is_array($arg['value']) && ($arg['operator'] == 'AND' || $arg['operator'] == 'OR' || $arg['operator'] == 'NOR'))
      $arg['value'] = implode(',', $arg['value']);
    db_query("INSERT INTO {view_filter} (vid, tablename, field, value, operator, position) VALUES ($view->vid, '$arg[tablename]', '$arg[field]', '$arg[value]', '$arg[operator]', $i)");
  }

}

// ---------------------------------------------------------------------------
// Themeable and support

function _views_handle_field($fields, $field, $data) {

  $info = $fields[$field['fullname']];

  if ($field['handler'] && function_exists($field['handler'])) {
    return $field['handler']($info, $field, $data->$field['queryname'], $data);
  }


  if ($info['handler'] && is_string($info['handler']) && function_exists($info['handler'])) {
    return $info['handler']($info, $field, $data->$field['queryname'], $data);
  }

  return $data->$field['queryname'];
}

function _views_construct_header($view, $fields) {
  foreach($view->field as $field) {
    $header = array();
    $info = $fields[$field['fullname']];

    if ($field['label'])
      $header['data'] = $field['label'];
    else
      $header['data'] = $info['name'];

    if ($field['sortable'])
      $header['field'] = $field['fullname'];
    if ($field['defaultsort'])
      $header['sort'] = $field['defaultsort'];

    // Add CSS id to table cell header cell.
    $header['id'] = "view-field-$field[queryname]";
    $header['class'] = "view-cell-header";
    $headers[] = $header;
  }
  return $headers;
}

function views_view_list($view, $nodes) {
  foreach ($nodes as $node) {
    $item = '';
    foreach ($view->field as $field) {
      if ($field['label'])
        $item .= "<div class='view-label' id='view-label-$field[queryname]'>" . $field['label'] . "</div>";
      $item .= "<div class='view-field' id='view-data-$field[queryname]'>" . _views_handle_field($fields, $field, $node) . "</div>";
    }
    $items[] = "<div class='view-item' id='view-item-$view->name'>$item</div>\n"; // l($node->title, "node/$node->nid");
  }
  if ($items)
    return theme('item_list', $items);
}

function views_view_table($view, $nodes) {
  $fields = _views_get_fields(); 

  foreach ($nodes as $node) {
    $row = array();
    foreach ($view->field as $field) {
      $cell['data'] = _views_handle_field($fields, $field, $node);
      $cell['class'] = 'view-field';
      $cell['id'] = "view-field-$field[queryname]";
      $row[] = $cell;
    }
    $rows[] = $row;
  }
  return theme('table', $view->table_header, $rows);
}

function views_view_nodes($nodes, $teasers = true, $links = true) {
  foreach ($nodes as $n) {
    $node = node_load($n->nid);
//    $node = node_load(array('nid'=> $n->nid));
    $output .= node_view($node, $teasers, false, $links);
  }
  return $output;
}

function theme_views_view($view, $type, $nodes) {

  if ($view->header)
    $output = "<div class='view-header' id='view-header-$view->name'>" . check_markup($view->header, $view->header_format, false) . "</div>\n";

  switch ($view->type) {
    case 1: // => t("List View"), 
      $output .= views_view_list($view, $nodes);
      break;
    case 2: // => t("Table"), 
      $output .= views_view_table($view, $nodes);
      break;
    case 3: // => t("Teaser List"),
    case 5: // random taser
      $output .= views_view_nodes($nodes, true);
      break;
    case 4: // => t("Full Nodes")
    case 6: // random node
      $output .= views_view_nodes($nodes, false);
      break;
  }

  return "<div class='view' id='view-$view->name'>$output</div>\n";
}


function views_get_summary_link($argtype, $viewname, $item)
{
  $arginfo = _views_get_arguments();
  if (!function_exists($arginfo['handler'][$argtype]))
    return NULL;

  return $arginfo['handler'][$argtype]('link', $item, $argtype, $viewname);

}

function theme_views_summary($view, $type, $level, $nodes) {
  foreach ($nodes as $node) {
    $items[] = array(views_get_summary_link($view->argument[$level]['type'], $view->name, $node), $node->num_nodes);
  }
  if ($items)
    $output .= theme('table', array(), $items, array('id' => 'summary'));
  
  return "<div class='views' id='$view->name'>$output</div>";
  
}

// ---------------------------------------------------------------------------
// Field handlers

function views_handler_field_date($fieldinfo, $fielddata, $value, $data) {
  return format_date($value);
}

function views_handler_field_since($fieldinfo, $fielddata, $value, $data) {
  return format_interval(time() - $value);
}

function views_handler_field_int($fieldinfo, $fielddata, $value, $data) {
  return intval($value);
}

function views_handler_field_string($fieldinfo, $fielddata, $value, $data) {
  return $value;
}

function views_handler_field_username($fieldinfo, $fielddata, $value, $data) {
  $obj->name = $value;
  $uidfield = $fielddata['tablename'] . "_"  . $fieldinfo['uid'];
  $obj->uid = $data->$uidfield;
  return theme('username', $obj);
}

function views_handler_field_nodelink($fieldinfo, $fielddata, $value, $data) {
  return l($value, "node/$data->nid");
}

function views_handler_field_nodelink_with_mark($fieldinfo, $fielddata, $value, $data) {
  return l($value, "node/$data->nid") .' '. theme('mark', node_mark($data->nid, $data->n_changed))
;
}


function views_handler_nodetype($fieldinfo, $fielddata, $value, $data) {
  return node_get_name($value);
}

function views_handler_comments_with_new($fieldinfo, $fielddata, $value, $data) {
  $comments = intval($value);
  if (module_exist('comment') && $comments && $new = comment_num_new($data->nid)) {
    $comments .= '<br />';
    $comments .= l(t('%num new', array('%num' => $new)), "node/$node->nid", NULL, NULL, 'new');
  }
  return $comments;
}

// ---------------------------------------------------------------------------
// Argument handlers

function views_handler_arg_nodetype($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'fields':
      $query->add_field("type");
      $query->add_groupby("n.type");
      $fieldinfo['field'] = "n.type";
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_where("n.type = '$arg'");
      break;
    case 'link':
      return l($query->type, "views/$arg/$query->type");
  }
}

function views_handler_arg_uid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'fields':
      $query->add_table('users', true);
      $query->add_field('name', 'users');
      $query->add_field('uid', 'users');
      $fieldinfo['field'] = "users.name";
      return $fieldinfo;
      break;
    case 'filter':
      $uid = intval($arg);
      $query->add_where("n.uid = $uid");
      break;
    case 'link':
      return l($query->name, "views/$arg/$query->uid");
  }
}

function views_handler_arg_taxid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'fields':
      $query->add_table('term_data', true);
      $query->add_field('name', 'term_data');
      $query->add_field('weight', 'term_data');
      $query->add_field('tid', 'term_data');
      $fieldinfo['field'] = "term_data.name";
      $query->add_orderby('term_data', 'weight', "ASC");
      $query->add_orderby('term_data', 'name', "ASC");
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_complex_filter('term_node', 'tid', $arg);
      break;
    case 'link':
      return l($query->name, "views/$arg/$query->tid");
  }
}
function views_handler_arg_year($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "YEAR(FROM_UNIXTIME(n.created+$timezone))";
      $fieldinfo['fieldname'] = "year";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $year = intval($arg);
      $query->add_where("YEAR(FROM_UNIXTIME(n.created+$timezone)) = $year");
      break;
    case 'link':
      return l($query->year, "views/$arg/$query->year");
  }
}
function views_handler_arg_month($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "MONTH(FROM_UNIXTIME(n.created+$timezone))";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $month = intval($arg);
      $query->add_where("MONTH(FROM_UNIXTIME(n.created+$timezone)) = $month");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F'), "views/$arg/$query->name");
  }
}
function views_handler_arg_week($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      // The 3 makes the week 1-53, the first week of the year has at least 3 days
      $fieldinfo['field'] = "WEEK(FROM_UNIXTIME(n.created+$timezone), 3)";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      // The 3 makes the week 1-53, the first week of the year has at least 3 days
      $week = intval($arg);
      $query->add_where("WEEK(FROM_UNIXTIME(n.created+$timezone), 3) = $week");
      break;
    case 'link':
      return l("Week $query->name", "views/$arg/$query->name");
  }
}
function views_handler_arg_monthyear($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m')";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_where("DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m') = '$arg'");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F, Y'), "views/$arg/$query->name");
  }
}
function views_handler_arg_fulldate($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m%d')";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_where("DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m%d') = '$arg'");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F j, Y'), "views/$arg/$query->name");
  }
}

// ---------------------------------------------------------------------------
// Filter handlers

function views_handler_filter_tid() {
  $tids = array();
  $result = db_query("SELECT DISTINCT(td.tid), td.name, v.name as vocabname FROM {term_data} td LEFT JOIN {vocabulary} v ON v.vid = td.vid ORDER BY v.weight, v.name, td.weight, td.name");
  while ($obj = db_fetch_object($result)) {
    $tids[$obj->tid] = "$obj->vocabname: $obj->name";
  }

  return $tids;

}

function views_handler_filter_vid() {
  $vids = array();
  $result = db_query("SELECT v.vid, v.name FROM {vocabulary} v ORDER BY v.weight, v.name");
  while ($obj = db_fetch_object($result)) {
    $vids[$obj->vid] = "$obj->name";
  }
  return $vids;
}

// I worry this will really, really suck for large sites.
// But then, why would large sites create a filter for one particular user?
// Better to go with roles.
function views_handler_filter_username() {
  $uids = array();
  $result = db_query("SELECT u.uid, u.name FROM {users} u WHERE uid != 0 ORDER BY u.name");
  while ($obj = db_fetch_object($result)) {
    $uids[$obj->uid] = "$obj->name";
  }
  return $uids;
}

function views_handler_filter_useranon() {
  return array("0" => variable_get('anonymous', 'Anonymous'));
}

function views_handler_filter_usercurrent() {
  return array("-1" => t('Currently Logged In User'));
}

function views_handler_filter_usercurrent_custom($op, $filter, $filterinfo, &$query) {
  global $user;
  $query->ensure_table("users");
  $query->add_where("users.uid $filter[operator] '$user->uid'");

}

function views_handler_filter_role() {
  $rids = array();
  $result = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
  while ($obj = db_fetch_object($result)) {
    $rids[$obj->rid] = "$obj->name";
  }
  return $rids;
}

function views_handler_filter_nodetype($op) {
  $nodes = array();
  foreach (node_get_types() as $type => $name) {
    $node_type = node_invoke($type, 'node_name');
    $nodes[$type] = $node_type ? $node_type : $type;
  }
  return $nodes;
}


// ---------------------------------------------------------------------------
// Operator handlers (for filters)

function views_handler_operator_andor() {
  return array('AND' => 'Is All Of', 'OR' => 'Is One Of', 'NOR' => "Is None Of");
}

function views_handler_operator_or() {
  return array('OR' => 'Is One Of', 'NOR' => "Is None Of");
}

function views_handler_operator_eqneq() {
  return array('=' => 'Is Equal To', '!=' => 'Is Not Equal To');
}

function views_handler_operator_yesno() {
  return array('1' => 'Yes', '0' => 'No');
}

// ---------------------------------------------------------------------------
// View creator tool (for module developers)

// TO USE THIS TOOL: Use a PHP snippet or something to call this function!

function views_create_view_code($vid) {
  $view = _views_load_view($vid);
  if (!$view)
    return "View '$vid' not found.";

  $output = "  \$view = new stdClass();\n";
  $output .= "  \$view->name = '$view->name';\n";
  $output .= "  \$view->description = '$view->description';\n";
  $output .= "  \$view->title = '$view->title';\n";
  $output .= "  \$view->header = '$view->header';\n";
  $output .= "  \$view->header_format = '$view->header_format';\n";
  $output .= "  \$view->type = '$view->type';\n";
  $output .= "  \$view->url = '$view->url';\n";
  $output .= "  \$view->use_pager = '$view->use_pager';\n";
  $output .= "  \$view->nodes_per_page = '$view->nodes_per_page';\n";
  $output .= "  \$view->block = '$view->block';\n";
  $output .= "  \$view->nodes_per_block = '$view->nodes_per_block';\n";
  $output .= "  \$view->block_display_header = '$view->block_display_header';\n";

  $output .= "  \$view->sort = array (\n";
  foreach ($view->sort as $sort) {
    $output .= "    array (\n";
    $fieldbits = explode('.', $sort['field']);
    $output .= "      'tablename' => '$fieldbits[0]',\n";
    $output .= "      'field' => '$fieldbits[1]',\n";
    $output .= "      'sortorder' => '$sort[sortorder]',\n";
    $output .= "    ),\n";  
  }
  $output .= "  );\n";

  $output .= "  \$view->argument = array (\n";
  foreach ($view->argument as $argument) {
    $output .= "    array (\n";
    $output .= "      'type' => '$argument[type]',\n";
    $output .= "      'argdefault' => '$argument[argdefault]',\n";
    $output .= "    ),\n";  
  }
  $output .= "  );\n";
    
  $output .= "  \$view->field = array (\n";
  foreach ($view->field as $field) {
    $output .= "    array (\n";
    $output .= "      'tablename' => '$field[tablename]',\n";
    $output .= "      'field' => '$field[field]',\n";
    $output .= "      'label' => '$field[label]',\n";
    if ($field['handler'])
      $output .= "      'handler' => '$field[handler]',\n";
    if ($field['sortable'])
      $output .= "      'sortable' => '$field[sortable]',\n";
    if ($field['defaultsort'])
      $output .= "      'defaultsort' => '$field[defaultsort]',\n";
    $output .= "    ),\n";  
  }
  $output .= "  );\n";

  $output .= "  \$view->filter = array (\n";
  foreach ($view->filter as $filter) {
    $output .= "    array (\n";
    $fieldbits = explode('.', $filter['field']);
    $output .= "      'tablename' => '$fieldbits[0]',\n";
    $output .= "      'field' => '$fieldbits[1]',\n";
    $output .= "      'operator' => '$filter[operator]',\n";
    $value = var_export($filter['value'], true);
    $output .= "      'value' => $value,\n";
    $output .= "    ),\n";  
  }
  $output .= "  );\n";
  $output .= "  \$views[\$view->name] = \$view;\n";
  // no breadcrumb for now.
  return $output;
}


?>
