<?php
// $Id: views.module,v 1.194 2007-08-19 23:29:50 merlinofchaos Exp $

/**
 * @file views.module
 * Query and view site content
 */

/**
 * Implementation of hook_menu
 */
function views_menu() {
  $items['views/test'] = array(
    'page callback' => 'views_test',
    'access callback' => TRUE,
    'title' => 'Views test',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['views/test/1'] = array(
    'page callback' => 'views_test_1',
    'access callback' => TRUE,
    'title' => 'Views test 1',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['views/test/2'] = array(
    'page callback' => 'views_test_2',
    'access callback' => TRUE,
    'title' => 'Views test 2',
    'type' => MENU_NORMAL_ITEM,
  );


  return $items;
}


function views_test() {
  views_include_view();
  views_include_query();

  $output = '';

  $view = views_get_view('views_test');
  if (!$view) {
    $view = new view;
    $view->name = 'views_test';
    $view->description = 'A view being used to test some handlers.';
    $view->set_page_size(3);

    $field = new views_field;
    $field->table = 'node';
    $field->field = 'title';
    $view->field[] = drupal_clone($field);

    $field->field = 'created';
    $view->field[] = drupal_clone($field);
    
    $field->table = 'users';
    $field->field = 'name';
    $view->field[] = $field;

    $sort = new views_sort;
    $sort->table = 'node';
    $sort->field = 'created';
    $sort->order = 'ASC';
    $view->sort[] = $sort;

/*
    $filter = new views_filter;
    $filter->table = 'node';
    $filter->field = 'nid';
    $filter->operator = '=';
    $filter->value = 3;
    $view->filter[] = $filter;
*/

    $argument = new views_argument;
    $argument->table = 'node';
    $argument->field = 'nid';
    $argument->default_action = 'summary asc';
    $view->argument[] = $argument;

    $view->save();
  }

  $view->build();
  $view2 = views_get_view('views_test');
  $view2->args = array('1');
  $view2->build();
  $output = '<pre>';
  $output .= print_r($view->build_info, 1);
  $output .= print_r($view2->build_info, 1);
  $output .= '</pre>';
  return $output;
}


function views_test_1() {
  views_include_view();

  $view = new view;
  $view->name = 'foo';
  $view->description = 'foobar';
  $view->set_page_size(3);

  $argument = new views_argument;
  $argument->type = 'node_nid';
  $argument->default_action = 'not_found';
  $argument->title = '%1';

  $view->argument[] = drupal_clone($argument);
  $argument->default_action = 'summary, ascended';
  $view->argument[] = $argument;

  $view->save();

  $view2 = new view;
  $view2->load($view->vid);

  $output = '<pre>';
  $array = array();
  $output .= "Array test: " . (array_push($array, 'foo'));
  $output .= "\n";
  $output .= var_export($view, 1);
  $output .= var_export($view2, 1);
  $output .= '</pre>';
  return $output;
}

function views_test_2() {

  views_include_query();
  $query = new views_query;



  $book_parent = $query->add_relationship('book_parent', new views_join('node', 'book', 'pid', 'nid'));
  $book_parent_users = $query->ensure_table('users', 'book_parent');

  $book_parent_parent = $query->add_relationship('book_parent_parent', new views_join('node', 'book', 'pid', 'nid'), 'book_parent');
  $book_parent_parent_users = $query->ensure_table('users', 'book_parent_parent');



  $query->add_relationship('term_hierarchy_1', new views_join('term_hierarchy', 'term_hierarchy', 'parent', 'tid'));
  $query->add_relationship('term_hierarchy_2', new views_join('term_hierarchy', 'term_hierarchy', 'parent', 'tid'), 'term_hierarchy_1');
  $book_parent_users = $query->ensure_table('term_data');
  $book_parent_users = $query->ensure_table('term_data', 'term_hierarchy_1', new views_join('term_data', 'term_hierarchy', 'tid', 'tid'));
  $book_parent_users = $query->ensure_table('term_data_x', 'term_hierarchy_2');

  $query->add_field('bar', 'baz');
  $query->add_field('node', 'title');
  $query->add_field(NULL, 'unix_timestamp(some_value)');

  $query->set_where_group('or', 'or');
  $query->add_where(0, 'froot_loops = 1', 'froot', 'loops');
  $query->add_where(0, 'gay = yes', 'gay', 'yes');
  $query->add_where('or', 'foo = bar');
  $query->add_where('or', 'bar = baz', 'bar', 'baz');

  $output = '';

  $output .= '<pre>';
  $output .= $query->query() . "\n";
  $output .= var_export($query->get_where_args(), true) . "\n";
/*
  $output .= "book_parent: <b>$book_parent</b>\n";
  $output .= "book_parent_users: <b>$book_parent_users</b>\n";
  $output .= "book_parent_parent: <b>$book_parent_parent</b>\n";
  $output .= "book_parent_parent_users: <b>$book_parent_parent_users</b>\n";
*/
  $output .= var_export($query, 1);
  $output .= '</pre>';
  return $output;
}

/**
 * Include view.inc
 */
function views_include_view() {
  require_once drupal_get_path('module', 'views') . '/includes/view.inc';
}

/**
 * Include query.inc
 */
function views_include_query() {
  views_include_handlers();
  require_once drupal_get_path('module', 'views') . '/includes/query.inc';
}

/**
 * Include handlers.inc
 */
function views_include_handlers() {
  require_once drupal_get_path('module', 'views') . '/includes/handlers.inc';
}

// STUB FUNCTION -- temporary data so there's something to test with.
function views_get_table_join($table, $primary_table) {
  // temp hack
  static $cache = array();
  if (empty($cache)) {
    $cache['users'] = new views_join('users', 'node', 'uid', 'uid');
    $cache['term_node'] = new views_join('term_node', 'node', 'nid', 'nid');
    $cache['term_data'] = new views_join('term_data', 'term_node', 'tid', 'tid');
    $cache['term_data_x'] = new views_join('term_data', 'term_hierarchy', 'tid', 'tid');
    $cache['term_hierarchy'] = new views_join('term_hierachy', 'term_node', 'tid', 'tid');
    $cache['book'] = new views_join('book', 'node', 'nid', 'nid');
    $cache['foo'] = new views_join('foo', 'node', 'nid', 'nid');
    $cache['bar'] = new views_join('bar', 'foo', 'baz', 'baz');
  }

//  if ($table == 'node') { drupal_set_message('<pre>'.var_export(debug_backtrace(), 1)); }
  return $cache[$table];
}

// STUB FUNCTION -- temporary data so there's something to test with.
function views_get_handler($table, $field, $key) {
  switch ($key) {
    case 'field':
      switch ($field) {
        case 'title':
          return new views_handler_field(TRUE);
        case 'name':
          return new views_handler_field(TRUE);
        case 'created':
          return new views_handler_field_date(TRUE);
      }
      break;
    case 'sort':
      switch ($field) {
        case 'created':
          return new views_handler_sort();
      }
      break;
    case 'filter':
      switch ($field) {
        case 'nid':
          return new views_handler_filter();
      }
      break;
    case 'argument':
      return new views_handler_argument('title');
  }
}
