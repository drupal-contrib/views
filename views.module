<?php

// TODO BEFORE RELEASE
// add changed field to prevent multiple people saving views simultaneously
// check queries for injection attacks, especially on that input!
// Check for enabled modules everywhere

// ---------------------------------------------------------------------------
// Select Box Definitions

function _views_arguments() {
  $data['name']['nodetype'] = t("Node Type");
  $data['handler']['nodetype'] = "views_handler_arg_nodetype";

  $data['name']['uid'] = t("User ID");
  $data['handler']['uid'] = "views_handler_arg_uid";

  $data['name']['taxid'] = t("Taxonomy Term ID");
  $data['handler']['taxid'] = "views_handler_arg_taxid";

  $data['name']['year'] = t("Year");
  $data['handler']['year'] = "views_handler_arg_year";

  $data['name']['month'] = t("Month (1-12)");
  $data['handler']['month'] = "views_handler_arg_month";

  $data['name']['week'] = t("Week (1-53)");
  $data['handler']['week'] = "views_handler_arg_week";

  $data['name']['monthyear'] = t("Month + Year (CCYYMM)");
  $data['handler']['monthyear'] = "views_handler_arg_monthyear";

  $data['name']['fulldate'] = t("Full Date (CCYYMMDD)");
  $data['handler']['fulldate'] = "views_handler_arg_fulldate";
  
  return $data;
}

// Argument info...
// OR: arg_handler($op, ...): $op in('filter', 'fields', 'link')

function _views_arguments_default() {
  return array(
    1 => t('Return Page Not Found'),
    2 => t('Display All Values'),
    3 => t('Summary Of Choices')
   );
}

function _views_types() {
  return array(
    1 => t("List View"), 
    2 => t("Table View"), 
    3 => t("Teaser List"),
    4 => t("Full Nodes")
  );
}

function _views_urls() {
  return array(
    1 => t("No URL"), 
    2 => t("URL without Menu Entry"), 
    3 => t("URL with Menu Entry")
  );
}

function _views_sortorders() {
  return array(
    "ASC" => t("Ascending"),
    "DESC" => t("Descending")
  );
}

function _views_tables() {

  $tables['term_node'] = array(
    "name" => "term_node", 
    "provider" => "internal",
    "join" => array(
      "left" => array(
        "table" => "node",
        "field" => "nid"
      ), 
      "right" => array(
        "field" => "nid"
      )
    ),
    "filters" => array(
      "tid" => array(
        'name' => "Taxonomy Term",
        'list' => "views_handler_filter_tid",
        'operator' => "views_handler_operator_andor",
      )
    )
  );

  $tables['term_data'] = array(
    "name" => "term_data", 
    "provider" => "internal",
    "join" => array(
      "left" => array(
        "table" => "term_node",
        "field" => "tid"
      ), 
      "right" => array(
        "field" => "tid"
      ), 
    ),
    "fields" => array(
      "name" => array(
        'name' => "Taxonomy Term", 
        'sortable' => true
      ),
      "description" => array(
        'name' => "Taxonomy Term Description", 
        'sortable' => false
      ),
    ),
    "sorts" => array(
      "weight" => array(
        'name' => "Taxonomy Name", 
        'field' => array('weight', 'name')
      )
    ),
    "filters" => array(
      "vid" => array(
        'name' => "Vocabulary Term",
        'list' => "views_handler_filter_vid",
        'operator' => "views_handler_operator_andor",
      )
    )
  );

  $tables['node_comment_statistics'] = array(
    "name" => "node_comment_statistics", 
    "provider" => "internal",
    "join" => array(
      "left" => array(
        "table" => "node",
        "field" => "nid"
      ), 
      "right" => array(
        "field" => "nid"
      ), 
    ),
    "fields" => array(
      "last_comment_timestamp" => array(
        'name' => "Last Comment Time", 
        'sortable' => true, 
        'handler' => array("views_handler_field_date" => "As Date", "views_handler_field_since" => "As Time Ago")
       ),
      "last_comment_name" => array(
        'name' => "Last Comment Author", 
        'handler' => 'views_handler_field_username', 
        'sortable' => true, 
        'uid' => "last_comment_uid", 
        'addlfields' => array("last_comment_uid")
      ),
      "comment_count" => array(
        'name' => "Comment Count", 
        'sortable' => true, 
        'handler' => array("views_handler_field_int" => "Normal", "views_handler_comments_with_new" => "With New Count")
      ),
    ),
    "sorts" => array(
      "last_comment_timestamp" => array('name' => "Last Comment Date")
    )

  );

  $tables['users'] = array(
    "name" => "users", 
    "provider" => "internal", // won't show up in external list.
    "join" => array(
      "left" => array(
        "table" => "node",
        "field" => "uid"
      ), 
      "right" => array(
        "field" => "uid"
      ), 
    ),
    "fields" => array(
      "name" => array(
        'name' => "Author Name", 
        'handler' => 'views_handler_field_username', 
        'sortable' => true, 
        'uid' => "uid", 
        'addlfields' => array("uid")
      ),
    ),
    "sorts" => array(
      "name" => array('name' => "Author Name")
    ),
    "filters" => array(
      "uid" => array(
        'name' => "Author Name",
        'operator' => "views_handler_operator_or",
        'list' => "views_handler_filter_username"
      ),
      "anon" => array(
        'field' => 'uid',
        'name' => "Author Name is Anonymous",
        'operator' => "views_handler_operator_eqneq",
        'list' => "views_handler_filter_useranon"
      ),
      "currentuid" => array(
        'name' => "Author Name is Current User",
        'operator' => "views_handler_operator_eqneq",
        'list' => "views_handler_filter_usercurrent",
        'custom' => "views_handler_filter_usercurrent_custom",
        'cacheable' => 'no', // for future use.
      ),
    )
  );

  $tables['users_roles'] = array(
    "name" => "users_role", 
    "provider" => "internal", // won't show up in external list.
    "join" => array(
      "left" => array(
        "table" => "node",
        "field" => "uid"
      ), 
      "right" => array(
        "field" => "uid"
      ), 
    ),
    "filters" => array(
      "rid" => array(
        'name' => "Author Role",
        'operator' => "views_handler_operator_andor",
        'list' => "views_handler_filter_role"
      ),
    )
  );
  return $tables;
}

// filters
// name
// field (in case the array key is not the field)
// list: (if array use; otherwise it is a handler)
// list-type: checkbox, list, select
// operator: (if array use; otherwise it is a handler)
// transform: if here, handler for transforming data.
// validate: if here, handler for validating data.

function _views_node_filters() {

  return array(
    "n.status" => array(
      'name' => "Published",
      'table' => "n",
      'operator' => array("=" => "Equals"),
      'list' => "views_handler_operator_yesno",
      'list-type' => "select"
    ),
    "n.promote" => array(
      'name' => "Front Page",
      'table' => "n",
      'operator' => array("=" => "Equals"),
      'list' => "views_handler_operator_yesno",
      'list-type' => "select"
    ),
    "n.type" => array(
      'name' => "Node Type",
      'table' => "n",
      'list' => "views_handler_filter_nodetype",
      'list-type' => 'checkbox',
      'operator' => "views_handler_operator_or"
    ),
  );
}

function _views_construct_filters($table_data, $titles = false) {
  $filters = _views_node_filters();
  if ($titles) {
    foreach ($filters as $key => $data) {
      $newfilters[$key] = $data['name'];
    }
    $filters = $newfilters;
  }
    
  foreach ($table_data as $name => $table) {
    if (is_array($table['filters'])) {
      foreach($table['filters'] as $filter => $data) {
        $data['table'] = $name;
        if ($titles)
          $filters["$table[name].$filter"] = $data['name'];
        else
          $filters["$table[name].$filter"] = $data;
      }
    }
  }
  return $filters;
}

function _views_node_fields() {
  return array(
    "n.title" => array(
      'name' => "Node Title", 
      'handler' => array('views_handler_field_nodelink' => 'Normal', 'views_handler_field_nodelink_with_mark' => "With updated mark"),
      'sortable' => true, 'addlfields' => array('changed') 
    ),
    "n.created" => array(
      'name' => "Node Created Time", 
      'sortable' => true, 
      'handler' => array("views_handler_field_date" => "As Date", "views_handler_field_since" => "As Time Ago")
    ),
    "n.changed" => array(
      'name' => "Node Updated Time", 
      'sortable' => true, 
      'handler' => array("views_handler_field_date" => "As Date", "views_handler_field_since" => "As Time Ago")
    ),
    "n.type" => array(
      'name' => "Node Type", 
      'handler' => 'views_handler_nodetype', 
      'sortable' => true
    ),
  );
}

function _views_construct_fields($table_data, $titles = false) {
  $fields = _views_node_fields();
  if ($titles) {
    foreach ($fields as $key => $data) {
      $newfields[$key] = $data['name'];
    }
    $fields = $newfields;
  }
    
  foreach ($table_data as $name => $table) {
    if (is_array($table['fields'])) {
      foreach($table['fields'] as $field => $data) {
        $data['table'] = $name;
        if ($titles)
          $fields["$table[name].$field"] = $data['name'];
        else
          $fields["$table[name].$field"] = $data;
      }
    }
  }
  return $fields;
}

function _views_node_sorts() {
	return array(
		"n.created" => array('name' => "Post Date", 'table' => 'n'),
		"n.changed" => array('name' => "Last Changed Date", 'table' => 'n'),
		"n.sticky" => array('name' => "Node set to Sticky", 'table' => 'n'),
		"n.title" => array('name' => "Node Title", 'table' => 'n')
	);
}

function _views_construct_sorts($table_data, $titles = false) {
  $sorts = _views_node_sorts();
  if ($titles) {
    foreach ($sorts as $key => $data) {
      $newsorts[$key] = $data['name'];
    }
    $sorts = $newsorts;
  }
    
  foreach ($table_data as $name => $table) {
    if (is_array($table['sorts'])) {
      foreach($table['sorts'] as $field => $data) {
        $data['table'] = $name;
        if ($titles)
          $sorts["$table[name].$field"] = $data['name'];
        else {
          $sorts["$table[name].$field"] = $data;
        }
      }
    }
  }
  return $sorts;
}

// ---------------------------------------------------------------------------
// Drupal Hooks

function views_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('The views module creates customized views of node lists.');
  }
}

function views_perm() {
  return array('administer views');
}

function views_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'admin/views', 
      'title' => t('views'),
      'callback' => 'views_admin_page',
      'access' => user_access('administer views'),
      'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'admin/views/add', 
      'title' => t('add view'),
      'callback' => 'views_admin_add_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/views/edit', 
      'title' => t('edit view'),
      'callback' => 'views_admin_edit_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'views', 
      'title' => t('add view'),
      'callback' => 'views_view_page',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $result = db_query("SELECT name, title FROM {view_view} WHERE url = 3");

    while ($view = db_fetch_object($result)) {
      $items[] = array('path' => "views/$view->name",
        'title' => $view->title,
        'callback' => 'views_view_page',
        'callback arguments' => array($view->name),
        'access' => user_access('access content'),
        'type' => MENU_NORMAL_ITEM);
    }
  }

  return $items;
}


function views_block($op = 'list', $delta = 0) {
  $block = array();
  if ($op == 'list') {
    $result = db_query("SELECT vid, title FROM {view_view} WHERE block = 1");
    while ($view = db_fetch_object($result)) {
      $block[$view->vid]['info'] = $view->title;
    }
    return $block;
  }
  else if ($op == 'view') {
    // Only display this block when the user is browsing a book:
    return views_view_block($delta);
  }
}

// ---------------------------------------------------------------------------
// Administrative Pages


function views_admin_page() {
  $numViews = 25;

  drupal_set_title("Administer views Views");

  $result = pager_query("SELECT vid, name, description, title FROM {view_view} ORDER BY name", $numViews);
  while ($view = db_fetch_object($result)) {
    $url = "views/$view->name";
    $items[] = array($view->title, $view->description, l($url, $url), l('edit', "admin/views/edit/$view->vid"));
  }

  if ($items) {
    $output = theme('table', array('View', 'Description', 'URL', 'Actions'), $items, array("cellpadding" => "4"));
    $output .= theme('pager', NULL, $numViews);
  }
  else {
    $output .= "<p>No views have currently been defined.</p>";
  }
  $output .= l('Add a view', 'admin/views/add');
  print theme('page', $output);
}



function views_admin_add_page($template = '') {
  $view = $_POST['edit'];
  if (is_array($view))
    $view = array2object($view);
  $op = $_POST['op'];

  if ($op == 'Cancel')
    return drupal_goto('admin/views');
  else if ($op == 'Save') {
    if (_views_view_validate($view)) {
      _views_save_view($view);
      menu_rebuild();
      drupal_set_message("View successfully added.");
      return drupal_goto('admin/views');
    }
  }
  else if (!$op)
    $view = _views_get_default_view($template);

  drupal_set_title(t('Add a View'));

  _views_view_form($view, $op);
}

function views_admin_edit_page($vid = '') {
  $view = $_POST['edit'];
  if (is_array($view))
    $view = array2object($view);
  else
    $view = _views_load_view($vid);

  $op = $_POST['op'];

  if ($op == 'Cancel')
    return drupal_goto('admin/views');
  else if ($op == 'Save') {
    if (_views_view_validate($view)) {
      _views_save_view($view);
      menu_rebuild();
      drupal_set_message("View successfully saved .");
      return drupal_goto('admin/views');
    }
  }
  else if ($op == 'Delete') {
    return _views_delete_form($view);
  }
  else if ($op == 'Really Delete') {
    _views_delete_view($view);
    drupal_goto('admin/views');
  }

  drupal_set_title(t('Edit View %n', array('%n' => $view->name)));

  _views_view_form($view, $op);

}

// FIXME: Ok, this can be a proper object any day now.
function _views_get_default_view($template = '') {
  $view->use_pager = 1;
  $view->nodes_per_page = variable_get('default_nodes_main', 10);
  $view->filter_published = 1;
  $view->url = 2;
  $view->vid = 0;
  _views_check_arrays($view);
  return $view;
}

function _views_check_arrays(&$view) {
  if (!is_array($view->field))
    $view->field = array();
  if (!is_array($view->sort))
    $view->sort = array();
  if (!is_array($view->argument))
    $view->argument = array();
  if (!is_array($view->breadcrumb))
    $view->breadcrumb = array();
  if (!is_array($view->filter))
    $view->filter = array();
}

function _views_view_form($view, $op = '') {

  // Compensate for possibly empty arrays that didn't get put into the form:
  _views_check_arrays($view);
  $tabledata = _views_tables();
  $fields = _views_construct_fields($tabledata);
  $fieldnames = _views_construct_fields($tabledata, true); // for selecting

  $sortnames = _views_construct_sorts($tabledata, true); // for selecting

  $filters = _views_construct_filters($tabledata);
  $filternames = _views_construct_filters($tabledata, true);

  // Deal with buttons other than submit.

  // Add/Delete Filter
  //----------------
  if ($op == "Add Filter") {
    $filter['field'] = $view->addfilter;
    $view->filter[] = $filter;
  }

  if (substr($op, 0, 13) == "Delete Filter") {
    $i = intval(substr($op, 14, 3));
    unset($view->filter[$i]);
    $view->filter = array_values($view->filter); // reindex
  }

  
  // Add/Delete Sort
  //----------------
  if ($op == "Add Criteria") {
    $sort['field'] = $view->addcriteria;
    $sort['sortorder'] = $view->addorder;
    $view->sort[] = $sort;
  }

  if (substr($op, 0, 15) == "Delete Criteria") {
    $i = intval(substr($op, 16, 3));
    unset($view->sort[$i]);
    $view->sort = array_values($view->sort); // reindex
  }

  // Add/Delete Argument
  //--------------------
  if ($op == "Add Argument") {
    $view->argument[] = $view->addargument;
  }

  if (substr($op, 0, 15) == "Delete Argument") {
    $i = intval(substr($op, 16, 3));
    unset($view->argument[$i]);
    $view->argument = array_values($view->argument); // reindex
  }

  // Add/Delete Field
  //-----------------


  if ($op == "Add Field") {
    $fieldbits = explode('.', $view->addfield);

    $newfield['fullname'] = $view->addfield;
    $newfield['tablename'] = $fieldbits[0];
    $newfield['field'] = $fieldbits[1];
    $newfield['label'] = $fieldnames[$view->addfield];
    $view->field[] = $newfield;
  }

  if (substr($op, 0, 12) == "Delete Field") {
    $i = intval(substr($op, 13, 3));
    unset($view->field[$i]);
    $view->field = array_values($view->field); // reindex
  }

  $form = form_hidden('vid', $view->vid);
  $form .= form_hidden('changed', $view->changed);

  // DEBUGGING
//    $form .= "<pre>" . var_export($view, TRUE) . "</pre>";

  $group = form_textfield(t('Name'), 'name', $view->name, 20, 32, t('The name of the view. The URL of the view will be views/NAME. If a block, this will be the unique identifier for the block. Since this is a URL, please do not use spaces!'), NULL, true);
  $group .= form_textfield(t('Description'), 'description', $view->description, 60, 255, t('A description of the view for the admin list.'));
  $group .= form_select(t('View Type'), 'type', $view->type, _views_types(), t('How the nodes should be displayed to the user.'));
  $group .= form_textfield(t('Title'), 'title', $view->title, 60, 255, t('The title of the view will be shown at the top of the view. May be blank if not using a block.'));
  $group .= form_textarea(t('Header'), 'header', $view->header, 60, 6, t('Text to display at the top of the view. May contain an explanation or links or whatever you like. Optional.'));
  $group .= filter_form('format', $view->header_format);

  $form .= form_group(t('Display'), $group);

  $group = "<p>Fields in this section will appear in the table in this order, only if List Type above is set to Table.</p>\n";
  $list = "";
  foreach ($view->field as $i => $field) {
    $fieldname = $field['fullname']; // combined table & fieldname
  
    $list .= "<li> " . $fields[$fieldname]['name'] . " &nbsp;";
    $form .= form_hidden("field][$i][fullname", $field['fullname']);
    $form .= form_hidden("field][$i][tablename", $field['tablename']);
    $form .= form_hidden("field][$i][field", $field['field']);

    $list .= form_textfield(t('Label'), "field][$i][label", $field['label'], 60, 25, t('The name displayed to the user.'));
    if (is_array($fields[$fieldname]['handler'])) {
      $list .= form_select(t('Handler', array('%n' => $i)), "field][$i][handler", $field['handler'], $fields[$fieldname]['handler']);
    }
    if ($fields[$fieldname]['sortable']) {
      $list .= form_select(t('Click sortable'), "field][$i][sortable", $field['sortable'], array('0' => t("Not Sortable"), "1" => t("Sortable")));
      $list .= form_select(t('Default Sorting'), "field][$i][defaultsort", $field['defaultsort'], array('0' => t("None"), "ASC" => t("Sort Ascending"), "DESC" => t("Sort Descending")));
    }
    $list .= form_submit(t("Delete Field %n", array('%n' => $i)));
  }
  if ($list) 
    $group .= "<ol>$list</ol>";


  $group .= form_select(t('Add a Field'), 'addfield', NULL, $fieldnames);
  $group .= form_submit(t("Add Field"));
  $form .= form_group(t('Table'), $group);

  $group = form_checkbox(t('Provide Block'), 'block', 1, $view->block, t('If checked this view will be provided as a block. If checked title may not be blank.'));
  $group .= form_textfield(t('Nodes per Block'), 'nodes_per_block', $view->nodes_per_block, 2, 2, t('If using a block, the maximum number of items to display in the block. Pagers are not used in blocks.'), NULL, true);
  $group .= form_checkbox(t('Display Header'), 'block_display_header', 1, $view->block_display_header, t('If using a view as both a block and URL, display the header in the block?'));

  $form .= form_group(t('Block'), $group);

  
  $group = form_select(t('URL Type'), 'url', $view->url, _views_urls(), t('Choose whether or not to provide a URL and a Menu entry for this view..'));
  $urlgroup = form_checkbox(t('Use Pager'), 'use_pager', 1, $view->use_pager, t('If checked this query may be multiple pages. If not checked this query will be one page.'));
  $urlgroup .= form_textfield(t('Nodes per Page'), 'nodes_per_page', $view->nodes_per_page, 2, 2, t('The number of nodes to display per page. If 0 no nodes will be displayed. If not using a pager, this will be the maximum number of nodes in the list.'), NULL, true);

  $group .= form_group(t('Pager'), $urlgroup);

  $arginfo = _views_arguments();
//  for ($i = 0; $i < count($view->argument); $i++) {
  foreach ($view->argument as $i => $argument) {
    $arggroup .= form_select(t("Argument $i"), "argument][$i][type", $argument['type'], $arginfo['name']);
    $arggroup .= form_select(t("Argument $i Default"), "argument][$i][argdefault", $argument['argdefault'], _views_arguments_default());
    $arggroup .= form_submit(t("Delete Argument %n", array('%n' => $i)));
  }
  if (!$arggroup)
    $arggroup = "<p>This view does not accept arguments</p>";

  $group .= form_group(t('Current Arguments'), $arggroup);

  $arggroup = form_select(t('Argument'), 'addargument][type', NULL, $arginfo['name'], t('If using a URL and you want it to accept arguments, this is how to parse the argument. For example, "views/VIEWNAME/1" could produce nodes authored by User ID #1 if this field is set to User ID. It can accept multiple, successive arguments..'));
  $arggroup .= form_select(t('Argument Default'), 'addargument][argdefault', NULL, _views_arguments_default(), t('If argument 1 was specified, what action to take if the argument is not given.'));
  $arggroup .= form_submit('Add Argument');
  $group .= form_group(t('Add an Argument'), $arggroup);
  
  $form .= form_group(t('URL'), $group);

  $group = "";

  foreach ($view->filter as $i => $filter) {
    $filtername = $filter['field']; // combined table & filtername
    $filterinfo = $filters[$filtername];

    $fgroup = $filterinfo['name'] . " &nbsp;";
    $form .= form_hidden("filter][$i][field", $filter['field']);

    // 'operator' is either an array or a handler
    $operator = $filterinfo['operator'];
    if (!is_array($operator) && function_exists($filterinfo['operator'])) 
      $operator = $filterinfo['operator']('operator', $filterinfo);

    $fgroup .= form_select(NULL, "filter][$i][operator", $filter['operator'], $operator);

    if ($filterinfo['list']) {
      $list = $filterinfo['list'];

      if (!is_array($list) && function_exists($filterinfo['list'])) 
        $list = $filterinfo['list']('list', $filterinfo);

      $multiple = false;
      switch($filterinfo['list-type']) {
        case 'checkbox':
          $fgroup .= form_checkboxes(t('Value'), "filter][$i][value", $filter['value'], $list);
          break;
        case 'list':
        default:
          $multiple = true;
          // no break, fall thru
        case 'select':
          $fgroup .= form_select(t('Value'), "filter][$i][value", $filter['value'], $list, NULL, NULL, $multiple);
          break;
      }
    }
    else {
      if ($filterinfo['transform'] && function_exists($filterinfo['transform'])) {
        $filter['value'] = $filterinfo['transform']('out', $filter['value'], $filterinfo);
      }
      $fgroup .= form_textfield(t('Value'), "filter][$i][value", $filter['value'], 20, 255);
    }
    $fgroup .= form_submit(t("Delete Filter %n", array('%n' => $i)));
    $group .= form_group(t('Filter %n', array('%n' => $i)), $fgroup);
  }


  if (!$group) {
    $group = "<p>No filtering Criteria Specified</p>";
  }

/*
  $group = form_checkbox(t('Filter By Node Types'), 'filter_use_nodetypes', 1, $view->filter_use_nodetypes, t('If checked the list will be limited to the node types checked below.'));

  // Get a list of nodetypes
  foreach (node_list() as $type) {
    $node_type = node_invoke($type, 'node_name');
    $nodes[$type] = $node_type ? $node_type : $type;
  }
  $group .= form_checkboxes(t('Types'), 'filter_nodetypes', $view->filter_nodetypes, $nodes, t('A list of node types to filter the query to.'));

  $group = form_group(t('Node Types'), $group);

  $group .= form_checkbox(t('Published Nodes Only'), 'filter_published', 1, $view->filter_published, t('If checked the list will be limited to published nodes. It is recommended that this is checked.'));

  $group .= form_checkbox(t('Front Page Only'), 'filter_frontpage', 1, $view->filter_frontpage, t('If checked the list will be limited to nodes that have been promote to the front page.'));

  $group .= form_textfield(t('Filter to Taxonomy Term'), 'filter_taxonomy_term', $view->filter_taxonomy_term, 60, 255, t('If not blank, filter to taxonomy term as with taxonomy/term. Use "+" for or, "," for and. See taxonomy help for more details.'));

  $group .= form_textfield(t('Filter to Taxonomy Vocabulary'), 'filter_taxonomy_voc', $view->filter_taxonomy_voc, 60, 255, t('If not blank, filter to taxonomy vocabulary similar to taxonomy/term, but with vocabulary IDs. Use "+" for or, "," for and. See taxonomy help for more details.'));

  $group .= form_checkbox(t('Use Author Filter'), 'filter_use_author', 1, $view->filter_use_author, t('If checked the list will be limited to nodes authored by the filtered user.'));

  $group .= form_textfield(t('Filter to Author Name'), 'filter_author_name', $view->filter_author_name, 60, 255, t('If filter checked, filter to nodes posted by a given author. Use -1 for the logged in user (so that a user would see his or her own posts). Leave blank for Anonymous user.'));
  $group .= form_hidden('filter_author_uid', $view->filter_author_uid);

  */
  $form .= form_group(t('Filters'), $group);
  $group = form_select(t("Filter"), 'addfilter', NULL, $filternames);
  $group .= form_submit(t("Add Filter"));

  $form .= form_group(t("Add Filter"), $group, t("Use this box to add a new Filter"));


  $group = "";
  foreach ($view->sort as $i => $sort) {
    $group .= form_select(NULL, "sort][$i][field", $sort['field'], $sortnames);
    $group .= form_select(NULL, "sort][$i][sortorder", $sort['sortorder'], _views_sortorders());
    $group .= form_submit(t("Delete Criteria %n", array('%n' => $i)));
  }
  if (!$group) {
    $group = "<p>No Sorting Criteria Specified</p>";
  }

  $form .= form_group(t("Sorting Criteria"), $group, t("The order of criteria from top to bottom determines which fields will be sorted first."));

  $group = form_select(t("Criteria"), 'addcriteria', NULL, $sortnames);
  $group .= form_select(t("Order"), 'addorder', NULL, _views_sortorders());
  $group .= form_submit(t("Add Criteria"));

  $form .= form_group(t("Add Sorting Criteria"), $group, t("Use this box to add a new sort criteria"));

  

  $form .= form_submit('Save');
  if ($view->vid)
    $form .= form_submit('Delete');
  $form .= form_submit('Cancel');

  print theme('page', form($form));

}

function _views_delete_form($view) {
  $form = form_hidden('vid', $view->vid);
  $form .= "<p>Really delete view '$view->name'?</p>";
  $form .= form_submit('Really Delete');

  print theme('page', form($form));
}


function _views_view_validate(&$view) {
  $filters = _views_construct_filters(_views_tables());
  _views_check_arrays($view);
  
  if ($view->vid) {
    $changed = db_result(db_query("SELECT changed FROM {view_view} WHERE vid = $view->vid"));
    if ($changed && $view->changed != $changed) {
      form_set_error('', "Another user has modified this view, unable to save. You can get this error by using the Back button to re-edit a view after saving one; if you do this, be sure to Reload before making any changes!");
      return false;
    }
  }

  $valid = true;
  foreach ($view->filter as $i => $filter) {
    $filterinfo = $filters[$filter['field']]; // shortcut
    if ($filterinfo['transform'] && function_exists($filterinfo['transform'])) {
      $filter['value'] = $filterinfo['transform']('in', $filter['value'], $filterinfo);
    }
    if ($filterinfo['validate'] && function_exists($filterinfo['validate'])) {
      if ($rc = $filterinfo['validate']('validate', $filter['value'], $filterinfo)) {
        $validfilter = false;
        form_set_error("filter][$i][value]", $rc);
      }
    }
  }
  
  if ($view->use_block && !$view->title) {
    form_set_error('title', "If being used as a block, title may not be blank.");
    $valid = false;
  }

  if (!$view->name) {
    form_set_error('name', "View name is required.");
    $valid = false;
  }

  // test uniqueness of name
  $vid = db_result(db_query("SELECT vid FROM {view_view} WHERE name='" . db_escape_string($view->name) . "'"));
  if ($vid && $vid != $view->vid) {
    form_set_error('name', "View name already in use.");
    $valid = false;
  }


  if ($view->use_block && $view->nodes_per_block < 1) {
    form_set_error('nodes_per_block', "If being used as a block, Nodes Per Block must be positive.");
    $valid = false;
  }
/*
  if ($view->filter_use_nodetypes && empty($view->filter_nodetypes)) {
    form_set_error('filter_nodetypes', "If Filter Node Types is selected, at least one node type must be checked!");
    $valid = false;
  }

  if ($view->filter_use_author) {
    if ($view->filter_author_name == -1)
      $view->filter_author_uid = -1;

    if ($view->filter_author_name && $view->filter_author_name != variable_get('anonymous', 'Anonymous')) {
      // validate that we get a user.
      $u = user_load(array('name' => $view->filter_author_name));
      if (!$u->uid) {
        form_set_error('filter_author_name', "$view->filter_author_name is not a valid user!");
        $valid = false;
      }
      else {
        $view->filter_author_uid = $u->uid;
      }
    }
    else {
      $view->filter_author_uid = 0;
    }
  }

  if ($view->filter_taxonomy_term && !_views_break_phrase($view->filter_taxonomy_term)) {
    form_set_error('filter_taxonomy_term', "Unable to parse taxonomy term filter!");
    $valid = false;
  }

  if ($view->filter_taxonomy_voc && !_views_break_phrase($view->filter_taxonomy_voc)) {
    form_set_error('filter_taxonomy_voc', "Unable to parse taxonomy vocabulary filter!");
    $valid = false;
  }
*/
  if ($view->type == 2 && !count($view->field)) { // "Table" 
    form_set_error('addfield', "You must select what fields to display when using type 'Table'!");
    $valid = false;
  }

  return $valid;
}


// ---------------------------------------------------------------------------
// View Construction

function views_view_page() {
  $args = func_get_args();
  while ($next = array_shift($args)) {
    if (!$viewname)
      $viewname = $next;
    else
      $viewname .= "/$next";
    if ($view = _views_load_view($viewname))
      break;
  }
  if (!$view)
    return drupal_not_found();

  if ($view->url == 1)
    return drupal_not_found();

  // Done before theming so theme can change it if it wants.
  drupal_set_title($view->title);

  $output = views_view('page', $view, $args);
  print theme('page', $output);
}

function views_view_block($vid) {
  $view = _views_load_view($vid);

  if (!$view || !$view->block)
    return NULL;

  $block['content'] = views_view('block', $view, $args);
  $block['subject'] = $view->title;
  return $block;
}


function views_view($type, $view, $args = array()) {
  global $user;

  $query = new _views_query();

  // Process static filters
  _views_view_build_filters($query, $view);
  
  // Process arguments.
//  for ($i = 0; $i < count($view->argument); $i++) {
  foreach ($view->argument as $i => $argument) {
    if ($args[$i]) {
      _views_view_build_arg($query, $args[$i], $argument['type']);
    }
    else { 
      // This is what we do if we expected an arg but we didn't get it.
      switch ($argument['argdefault']) {
        case 1:
          return drupal_not_found();
        case 3:
          $level = $i;
          _views_build_summary($query, $argument['type']);
          $summary = true;
          break 2; // switch and for
      } 
    } 
  }

  if (!$summary) {
    _views_view_build_sorts($query, $view);
    if ($view->type == 1 || $view->type == 2) { // list (1) or table (2)
       // Title lists won't load the node, so put the name into this query.
//      $query->add_field('title');
//    else if ($view->type == 2) { // Table
      $fields = _views_construct_fields(_views_tables()); 

      foreach($view->field as $field) {
        // Some fields are not actually fields but require special handlers
        // to display their data.
        if (!$field['notafield'])
          $query->add_field($field['field'], $field['tablename'], $field['queryname']);
        // special handling
        if (is_array($fields[$field['fullname']]['addlfields'])) {
          foreach($fields[$field['fullname']]['addlfields'] as $name) 
            $query->add_field($name, $field['tablename'], "$field[tablename]_$name");
        }
      }
      if ($view->type == 2) { // table only
        $view->table_header = _views_construct_header($view, $fields);
        $query->set_header($view->table_header);
      }

    }
  }

  $sql = $query->query();
  
  // DEBUG
//  $output = "<pre>" . var_export($view, TRUE) . "</pre>";
//  $output .= "<pre>" . var_export($args, TRUE) . "</pre>";
// print "<pre>" . var_export($query, TRUE) . "</pre>";
//  $output .= "<table width=800px><tr><td>$sql</table>";

  $sql = db_rewrite_sql($sql);

  $use_pager = ($type == 'page' && $view->use_pager);

  if ($use_pager) {
    $csql = db_rewrite_sql($query->query(true), 'n', 'numrecs');
    $result = pager_query($sql, $view->nodes_per_page, 0, $csql);
  }

  else {
    $limit = ($type == 'page') ? $view->nodes_per_page : $view->nodes_per_block;
    if ($limit)
      $result = db_query_range($sql, 0, $limit);
    else
      $result = db_query($sql);
  }

  $items = array();
  while ($item = db_fetch_object($result)) {
    $items[] = $item;
  }
  // DEBUG
//  $output .= "<pre>" . var_export($items, true) . "</pre>";

  if ($summary) {
    $output = theme("views_summary_$view->name", $view, $type, $level, $items);
    if (!$output)
      $output = theme('views_summary', $view, $type, $level, $items);
  }
  else {
    $output = theme("views_view_$view->name", $view, $type, $items);
    if (!$output)
      $output = theme('views_view', $view, $type, $items);

  }

  if ($type == 'page' && $view->use_pager) {
    if ($view->table_header && !$summary)
      $output .= theme('pager', NULL, $view->nodes_per_page, 0, $tbspager);
    else
      $output .= theme('pager', NULL, $view->nodes_per_page, 0);
  }
  return $output;
}

function _views_view_build_filters(&$query, $view) {
  $filters = _views_construct_filters(_views_tables());

  foreach ($view->filter as $i => $filter) {
    $filterinfo = $filters[$filter['field']]; // shortcut
    $field = $filterinfo['field'];
    if (!$field) {
      $fieldbits = explode('.', $filter['field']);
      $field = $fieldbits[1];
    }

    $table = $filterinfo['table'];
//    $table = 'x';

    if (is_array($filter['value'])) {
      if ($filter['operator'] == 'OR' || $filter['operator'] == 'NOR') {
        $not = '';
        if ($filter['operator'] == 'NOR')
          $not = "NOT";
        $query->ensure_table($table);
        $query->add_where("$table.$field $not IN ('" . implode("','", $filter['value']) . "')");
      }
      else {
        $howmany = count($filter['value']);
        $high_table = $query->add_table($table, true, $howmany);
        if (!$high_table) // couldn't add the table
          break;

        $table_num = $high_table - $howmany;
        foreach ($filter['value'] as $item) {
          $table_num++;
          $tn = $query->get_table_name($table, $table_num);
          $query->add_where("$tn.$field = '$item'");
        }
      }
    }
    else {
      if (function_exists($filterinfo['custom'])) {
        $filterinfo['custom']('custom', $filter, $filterinfo, $query);
      }
      else {
        $query->ensure_table("$table");
        $query->add_where("$table.$field $filter[operator] '$filter[value]'");
      }
    }
  }

/*
  // Static filters
  if ($view->filter_published) 
    $query->add_where("n.status = 1");

  if ($view->filter_frontpage) 
    $query->add_where("n.promote = 1");

  if ($view->filter_use_author)  {
    if ($view->filter_author_uid == -1)
      $uid = $user->uid;
    else
      $uid = $view->filter_author_uid;
   
    $query->add_where("n.uid = $uid");
  }

  if ($view->filter_use_nodetypes) 
    $query->add_where("n.type IN ('" . implode("','", $view->filter_nodetypes) . "')");

  if ($view->filter_taxonomy_term)
    $query->add_complex_filter('term_node', 'tid', $view->filter_taxonomy_term);

  if ($view->filter_taxonomy_voc)
    $query->add_complex_filter('term_data', 'vid', $view->filter_taxonomy_voc);
*/
}

function _views_view_build_arg(&$query, $arg, $argtype) {
  $arginfo = _views_arguments();
  if (!function_exists($arginfo['handler'][$argtype]))
    return false;

  // call the handler
  $arginfo['handler'][$argtype]('filter', $query, $argtype, $arg);
  
}

function _views_view_build_sorts(&$query, $view) {
  $sorts = _views_construct_sorts(_views_tables());

  foreach ($view->sort as $i => $sort) {
    $field = $sorts[$sort['field']]['field'];
    if (!$field) {
      $fieldbits = explode('.', $sort['field']);
      $field = $fieldbits[1];
    }

    $table = $sorts[$sort['field']]['table'];
    if (is_array($field)) {
      foreach($field as $f) {
        $query->add_orderby($table, $f, $sort['sortorder']);
      }
    }
    else {
      $query->add_orderby($table, $field, $sort['sortorder']);
    }
  }
}

function _views_get_timezone() {
  global $user;
  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else {
    $timezone = variable_get('date_default_timezone', 0);
  }

  return $timezone;
}

function _views_build_summary(&$query, $argtype) {

  $arginfo = _views_arguments();
  if (!function_exists($arginfo['handler'][$argtype]))
    return false;

  $query->clear_fields();

  $fieldinfo = $arginfo['handler'][$argtype]('fields', $query, $argtype);

  if ($fieldinfo['fieldname'])
    $query->add_field("$fieldinfo[field] AS $fieldinfo[fieldname]", '');
  $query->add_field("count(n.nid) as num_nodes", '');
  $query->add_groupby("$fieldinfo[field]");
  $query->set_count_field("DISTINCT($fieldinfo[field])");
}
// ---------------------------------------------------------------------------
// Query construction object

class _views_query {

  function _views_query() {
    $this->where = "";
    $this->orderby = "";
    $this->groupby = "";
    $this->tables = array();
    $this->field = array("n.nid");
    $this->table_data = _views_tables();
    $this->count_field = "*";
    $this->header = array();
  }

  function add_field($field, $table = 'n', $alias = '') {
    if ($table) {
      if ($table && $table != 'n') {
        $this->ensure_path($table);
        if (!$this->tables[$table])
          $this->tables[$table] = 1;
      }
      $table .= ".";
    }
    if ($alias)
      $a = " AS $alias";
    $this->field[] = "$table$field$a";
  }

  function clear_fields() {
    $this->field = array();
  }

  function set_count_field($field) {
    $this->count_field = $field;
  }

  function add_where($clause) {
    if (!$this->where)
      $this->where = "WHERE " . $clause;
    else
      $this->where .= " AND " . $clause;
  }

  function add_orderby($table, $field, $order) {
    if (!$this->tables[$table])
      $this->add_table($table, true);

		if ($this->orderby)
			$this->orderby .= ", ";

		$this->orderby = " $table.$field $order";
  }

  function add_groupby($clause) {
    if (!$this->groupby)
      $this->groupby = "GROUP BY " . $clause;
    else
      $this->groupby .= ", " . $clause;
  }

  function ensure_table($table) {
    if ($this->tables[$table])
      return;

    if ($this->ensure_path($table))
      $this->tables[$table] = 1;
  }

  function add_table($table, $ensure_path = false, $howmany = 1) {
    if ($ensure_path) 
      if (!$this->ensure_path($table))
        return false;
      if (!$this->trace($table))
        return false;

    if (isset($this->tables[$table]))
      $this->tables[$table] += $howmany;
    else
      $this->tables[$table] = $howmany;
    return $this->tables[$table];
  }

  function set_header($header) {
    $this->header = $header;
  }

// One of those times where recursion isn't evil. Go me!
  function trace($table, $traced = array()) {
    $left_table = $this->table_data[$table]['join']['left']['table'];

    // Does it end at 'node'?
    if ($left_table == 'node')
      return true;

    // Have we been this way?
    if (isset($traced[$left_table]))
      return false;

    // Keep looking.
    $traced[$left_table] = 1;
    return $this->trace($left_table, $traced);
  }

  // because we're just making sure the linkages are ok,
  // just put the table in. However, we don't do it until
  // last in case there's a bad loop or something.
  function ensure_path($table, $traced = array(), $add = array()) {
    $left_table = $this->table_data[$table]['join']['left']['table'];

    // Does it end at 'node'?
    if ($left_table == 'node') {
      // We are done! Add our tables and unwind.
      foreach ($add as $t) {
        // Don't use add_table because it'll trace, and we already did that.
        // And we already know anything in $add isn't already in $this->tables
        $this->tables[$table] = 1;
      }
      return true;
    }

    // Have we been this way?
    if (isset($traced[$left_table])) {
      // we looped. Broked.
      return false;
    }

    // Do we have to add this table?
    if (!isset($this->tables[$left_table]))
      $add[] = $left_table;

    // Keep looking.
    $traced[$left_table] = 1;
    return $this->ensure_path($left_table, $traced, $add);
  }

  function get_table_name($table, $table_num) {
    if ($table_num < 2)
      return $table;
    else
      return $table . $table_num;
  }

  // At this time this handles only numeric arguments.
  function add_complex_filter($table, $field, $arg) {
    $res = _views_break_phrase($arg);
    $cmp = $res[0];
    $tids = $res[1];

    if ($cmp == 'or') {
      $table_num = $this->add_table($table, true); // ensure path
      $tn = $this->get_table_name($table, $table_num);
      if (!$tn) // couldn't add the table
        return;
      $this->add_where("$tn.$field in (" . implode(',', $tids) . ")");
    }
    else {
      $howmany = count($tids);
      $high_table = $this->add_table($table, true, $howmany);
      if (!$high_table) // couldn't add the table
        return;

      $table_num = $high_table - $howmany;
      foreach ($tids as $tid) {
        $table_num++;
        $tn = $this->get_table_name($table, $table_num);
        $this->add_where("$tn.$field = $tid");
      }
    }
  }
/*
  function add_complex_sort($table, $field, $order) {
    // We don't really care which table we use, so
    // only add if the table's not in there.
    if (!$this->tables[$table])
      $this->add_table($table, true);
    $this->add_orderby("$table.$field", $order);
  }
*/
  function query($getcount = false) {
    foreach ($this->tables as $table => $count) {
      foreach (range(1, $count) as $i) {
        $tn = $this->get_table_name($table, $i);
        if ($i != 1)
          $tnas = " $tn";
        else
          $tnas = "";

        $ltable = $this->table_data[$table]['join']['left']['table'];
        $lfield = $this->table_data[$table]['join']['left']['field'];
        $rfield = $this->table_data[$table]['join']['right']['field'];
        // special case for node table
        if ($ltable == 'node')
          $ltable = 'n'; 
        $joins .= " LEFT JOIN {$table}$tnas ON $ltable.$lfield = $tn.$rfield";
      }
    }
    if (!$getcount) {
      foreach($this->field as $field) {
        if (!$fields)
          $fields = $field;
        else
          $fields .= ", $field";
      }
      $groupby = $this->groupby;
    }
    else
      $fields = "count($this->count_field) as numrecs";

    if ($this->table_header) {
      if ($this->orderby)
        $before = "$this->orderby, ";
      $orderby = tablesort_sql($this->header, $before);
    }
    else if ($this->orderby)
      $orderby = "ORDER BY $this->orderby";

    return "SELECT $fields FROM {node} n $joins $this->where $groupby $orderby";
  }
}


// ---------------------------------------------------------------------------
// Utility

// Cribbed from taxonomy. Only works for numeric arguments.
function _views_break_phrase($str) {
  if (preg_match('/^([0-9]+[+ ])+[0-9]+$/', $str)) {
    // The '+' character in a query string may be parsed as ' '.
    return array('or', preg_split('/[+ ]/', $str));
  }
  else if (preg_match('/^([0-9]+,)*[0-9]+$/', $str)) {
    return array('and', explode(',', $str));
  }
  else {
    return NULL;
  }
}

// ---------------------------------------------------------------------------
// Database functions

function _views_view_fields() {
  return array('vid', 'name', 'description', 'title', 'header', 'header_format', 'use_pager', 'nodes_per_page', 'nodes_per_block', 'block_display_header', 'field', 'type', 'block', 'url', 'changed'/*, 'filter_use_nodetypes', 'filter_nodetypes', 'filter_published', 'filter_frontpage', 'filter_taxonomy_term', 'filter_taxonomy_voc', 'filter_use_author', 'filter_author_uid'*/);
}

function _views_delete_view($view) {
  $view->vid = intval($view->vid);
  if (!$view->vid)
    return;

  db_query("DELETE FROM {view_view} where vid=$view->vid");
  db_query("DELETE FROM {view_sort} where vid=$view->vid");
}

function _views_load_view($arg) {

  if (intval($arg) == 0)
    $where = "v.name = '$arg'";
  else
    $where = "v.vid =  $arg";

  $view = db_fetch_object(db_query("SELECT v.*, u.name as filter_author_name FROM {view_view} v INNER JOIN {users} u ON u.uid = v.filter_author_uid WHERE $where"));

  if (!$view->name)
    return NULL;

  if ($view->filter_use_author && !$view->filter_author_name) {
    if ($view->filter_author_uid == 0)
      $view->filter_author_name = variable_get('anonymous', 'Anonymous');
    else if ($view->filter_author_uid == -1)
      $view->filter_author_name = "-1";
    else
      $view->filter_author_name = "Unknown User";
  }

  if ($view->filter_nodetypes)
    $view->filter_nodetypes = explode(', ', $view->filter_nodetypes);
  else
    $view->filter_nodetypes = array();

  // load the sorting criteria too.
  $result = db_query("SELECT * FROM {view_sort} vs WHERE vid = $view->vid ORDER BY position ASC");

  $view->sort = array();
  while ($sort = db_fetch_array($result)) {
    $view->sort[] = $sort;
  }

  $result = db_query("SELECT * FROM {view_argument} WHERE vid = $view->vid ORDER BY position ASC");

  $view->argument = array();
  while ($arg = db_fetch_array($result)) {
    $view->argument[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_tablefield} WHERE vid = $view->vid ORDER BY position ASC");

  $view->field = array();
  while ($arg = db_fetch_array($result)) {
    $arg['fullname'] = "$arg[tablename].$arg[field]";
    $arg['queryname'] = "$arg[tablename]_$arg[field]";
    $view->field[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_breadcrumb} WHERE vid = $view->vid ORDER BY position ASC");

  $view->breadcrumb = array();
  while ($arg = db_fetch_array($result)) {
    $view->breadcrumb[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_filter} WHERE vid = $view->vid ORDER BY position ASC");

  $view->filter = array();
  while ($arg = db_fetch_array($result)) {
    if ($arg['operator'] == 'AND' || $arg['operator'] == 'OR' || $arg['operator'] == 'NOR')
      $arg['value'] = explode(',', $arg['value']);
    $view->filter[] = $arg;
  }

  return $view;
}

function _views_save_view($view) {
  _views_check_arrays($view);
  // make all our text fields safe:

  // collapse arrays
  if (is_array($view->filter_nodetypes))
    $view->filter_nodetypes = implode(', ', $view->filter_nodetypes);
  else
    $view->filter_nodetypes = '';

  $view->changed = time();
  $fields = _views_view_fields();
  if ($view->vid) {
    // update
    // Prepare the query:
    foreach ($view as $key => $value) {
      if (in_array($key, $fields)) {
        $q[] = db_escape_string($key) ." = '%s'";
        $v[] = $value;
      }
    }

    // Update the view in the database:
    db_query("UPDATE {view_view} SET ". implode(', ', $q) ." WHERE vid = '$view->vid'", $v);
    db_query("DELETE from {view_sort} WHERE vid='$view->vid'");
    db_query("DELETE from {view_argument} WHERE vid='$view->vid'");
    db_query("DELETE from {view_tablefield} WHERE vid='$view->vid'");
    db_query("DELETE from {view_breadcrumb} WHERE vid='$view->vid'");
    db_query("DELETE from {view_filter} WHERE vid='$view->vid'");
  }
  else {
    // insert

    // This method really saves on typos, and makes it a lot easier to add fields
    // later on.
    $view->vid = db_next_id('{view_view}_vid');

    // Prepare the query:
    foreach ($view as $key => $value) {
      if (in_array((string) $key, $fields)) {
        $k[] = db_escape_string($key);
        $v[] = $value;
        $s[] = "'%s'";
      }
    }

    db_query("INSERT INTO {view_view} (". implode(", ", $k) .") VALUES (". implode(", ", $s) .")", $v);
  }

  foreach ($view->sort as $i => $sort) {
    db_query("INSERT INTO {view_sort} (vid, position, field, sortorder) VALUES ($view->vid, $i, '$sort[field]', '$sort[sortorder]')");
  }

  foreach ($view->argument as $i => $arg) {
    db_query("INSERT INTO {view_argument} (vid, type, argdefault, position) VALUES ($view->vid, '$arg[type]', '$arg[argdefault]', $i)");
  }

  foreach ($view->field as $i => $arg) {
    db_query("INSERT INTO {view_tablefield} (vid, tablename, field, label, handler, sortable, defaultsort, position) VALUES ($view->vid, '$arg[tablename]', '$arg[field]', '$arg[label]', '$arg[handler]', '$arg[sortable]', '$arg[defaultsort]', $i)");
  }

  foreach ($view->breadcrumb as $i => $arg) {
    db_query("INSERT INTO {view_breadcrumb} (vid, title, link, position) VALUES ($view->vid, '$arg[title]', '$arg[link]', $i)");
  }

  foreach ($view->filter as $i => $arg) {
    if (is_array($arg['value']) && ($arg['operator'] == 'AND' || $arg['operator'] == 'OR' || $arg['operator'] == 'NOR'))
      $arg['value'] = implode(',', $arg['value']);
    db_query("INSERT INTO {view_filter} (vid, tablename, field, value, operator, position) VALUES ($view->vid, '$arg[tablename]', '$arg[field]', '$arg[value]', '$arg[operator]', $i)");
  }

}

// ---------------------------------------------------------------------------
// Themeable and support

function _views_handle_field($fields, $field, $data) {

  $info = $fields[$field['fullname']];

  if ($field['handler'] && function_exists($field['handler'])) {
    return $field['handler']($info, $field, $data->$field['queryname'], $data);
  }


  if ($info['handler'] && is_string($info['handler']) && function_exists($info['handler'])) {
    return $info['handler']($info, $field, $data->$field['queryname'], $data);
  }

  return $data->$field['queryname'];
}

function _views_construct_header($view, $fields) {
  foreach($view->field as $field) {
    $header = array();
    $info = $fields[$field['fullname']];

    if ($field['label'])
      $header['data'] = $field['label'];
    else
      $header['data'] = $info['name'];

    if ($field['sortable'])
      $header['field'] = $field['fullname'];
    if ($field['defaultsort'])
      $header['sort'] = $field['defaultsort'];

    // Add CSS id to table cell header cell.
    $header['id'] = "view-field-$field[queryname]";
    $header['class'] = "view-cell-header";
    $headers[] = $header;
  }
  return $headers;
}

function views_view_list($view, $nodes) {
  foreach ($nodes as $node) {
    foreach ($view->field as $field) {
      if ($field['label'])
        $item .= "<div class='view-label' id='view-label-$field[queryname]'>" . $field['label'] . "</div>";
      $item .= "<div class='view-field' id='view-data-$field[queryname]'>" . _views_handle_field($fields, $field, $node) . "</div>";
    }
    $items[] = "<div class='view-item' id='view-item-$view->name'>$item</div>\n"; // l($node->title, "node/$node->nid");
  }
  if ($items)
    return theme('item_list', $items);
}

function views_view_table($view, $nodes) {
  $table_data = _views_tables();
  $fields = _views_construct_fields(_views_tables()); 

  foreach ($nodes as $node) {
    $row = array();
    foreach ($view->field as $field) {
      $cell['data'] = _views_handle_field($fields, $field, $node);
      $cell['class'] = 'view-field';
      $cell['id'] = "view-field-$field[queryname]";
      $row[] = $cell;
    }
    $rows[] = $row;
  }
  return theme('table', $view->table_header, $rows);
}

function views_view_nodes($nodes, $teasers = true, $links = true) {
  foreach ($nodes as $n) {
    $node = node_load(array('nid'=> $n->nid));
    $output .= node_view($node, $teasers, false, $links);
  }
  return $output;
}

function theme_views_view($view, $type, $nodes) {

  if ($view->header)
    $output = "<div class='view-header' id='view-header-$view->name'>$view->header</div>\n";

  switch ($view->type) {
    case 1: // => t("List View"), 
      $output .= views_view_list($view, $nodes);
      break;
    case 2: // => t("Table"), 
      $output .= views_view_table($view, $nodes);
      break;
    case 3: // => t("Teaser List"),
      $output .= views_view_nodes($nodes, true);
      break;
    case 4: // => t("Full Nodes")
      $output .= views_view_nodes($nodes, false);
      break;
  }

  return "<div class='view' id='view-$view->name'>$output</div>\n";
}


function views_get_summary_link($argtype, $viewname, $item)
{
  $arginfo = _views_arguments();
  if (!function_exists($arginfo['handler'][$argtype]))
    return NULL;

  return $arginfo['handler'][$argtype]('link', $item, $argtype, $viewname);

}

function theme_views_summary($view, $type, $level, $nodes) {
  foreach ($nodes as $node) {
    $items[] = array(views_get_summary_link($view->argument[$level]['type'], $view->name, $node), $node->num_nodes);
  }
  if ($items)
    $output .= theme('table', array(), $items, array('id' => 'summary'));
  
  return "<div class='views' id='$view->name'>$output</div>";
  
}

// ---------------------------------------------------------------------------
// Field handlers

function views_handler_field_date($fieldinfo, $fielddata, $value, $data) {
  return format_date($value);
}

function views_handler_field_since($fieldinfo, $fielddata, $value, $data) {
  return format_interval(time() - $value);
}

function views_handler_field_int($fieldinfo, $fielddata, $value, $data) {
  return intval($value);
}

function views_handler_field_string($fieldinfo, $fielddata, $value, $data) {
  return $value;
}

function views_handler_field_username($fieldinfo, $fielddata, $value, $data) {
  $obj->name = $value;
  $uidfield = $fielddata['tablename'] . "_"  . $fieldinfo['uid'];
  $obj->uid = $data->$uidfield;
  return format_name($obj);
}

function views_handler_field_nodelink($fieldinfo, $fielddata, $value, $data) {
  return l($value, "node/$data->nid");
}

function views_handler_field_nodelink_with_mark($fieldinfo, $fielddata, $value, $data) {
  return l($value, "node/$data->nid") .' '. theme('mark', node_mark($data->nid, $data->n_changed))
;
}


function views_handler_nodetype($fieldinfo, $fielddata, $value, $data) {
  return node_invoke($value, 'node_name');
}

function views_handler_comments_with_new($fieldinfo, $fielddata, $value, $data) {
  $comments = intval($value);
  if (module_exist('comment') && $comments && $new = comment_num_new($data->nid)) {
    $comments .= '<br />';
    $comments .= l(t('%num new', array('%num' => $new)), "node/$node->nid", NULL, NULL, 'new');
  }
  return $comments;
}

// ---------------------------------------------------------------------------
// Argument handlers

function views_handler_arg_nodetype($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'fields':
      $query->add_field("type");
      $query->add_groupby("n.type");
      $fieldinfo['field'] = "n.type";
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_where("n.type = '$arg'");
      break;
    case 'link':
      return l($query->type, "views/$arg/$query->type");
  }
}

function views_handler_arg_uid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'fields':
      $query->add_table('users', true);
      $query->add_field('name', 'users');
      $query->add_field('uid', 'users');
      $fieldinfo['field'] = "users.name";
      return $fieldinfo;
      break;
    case 'filter':
      $uid = intval($arg);
      $query->add_where("n.uid = $uid");
      break;
    case 'link':
      return l($query->name, "views/$arg/$query->uid");
  }
}

function views_handler_arg_taxid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'fields':
      $query->add_table('term_data', true);
      $query->add_field('name', 'term_data');
      $query->add_field('weight', 'term_data');
      $query->add_field('tid', 'term_data');
      $fieldinfo['field'] = "term_data.name";
      $query->add_orderby('term_data', 'weight', "ASC");
      $query->add_orderby('term_data', 'name', "ASC");
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_complex_filter('term_node', 'tid', $arg);
      break;
    case 'link':
      return l($query->name, "views/$arg/$query->tid");
  }
}
function views_handler_arg_year($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "YEAR(FROM_UNIXTIME(n.created+$timezone))";
      $fieldinfo['fieldname'] = "year";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $year = intval($arg);
      $query->add_where("YEAR(FROM_UNIXTIME(n.created+$timezone)) = $year");
      break;
    case 'link':
      return l($query->year, "views/$arg/$query->year");
  }
}
function views_handler_arg_month($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "MONTH(FROM_UNIXTIME(n.created+$timezone))";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $month = intval($arg);
      $query->add_where("MONTH(FROM_UNIXTIME(n.created+$timezone)) = $month");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F'), "views/$arg/$query->name");
  }
}
function views_handler_arg_week($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      // The 3 makes the week 1-53, the first week of the year has at least 3 days
      $fieldinfo['field'] = "WEEK(FROM_UNIXTIME(n.created+$timezone), 3)";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      // The 3 makes the week 1-53, the first week of the year has at least 3 days
      $week = intval($arg);
      $query->add_where("WEEK(FROM_UNIXTIME(n.created+$timezone), 3) = $week");
      break;
    case 'link':
      return l("Week $query->name", "views/$arg/$query->name");
  }
}
function views_handler_arg_monthyear($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m')";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_where("DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m') = '$arg'");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F, Y'), "views/$arg/$query->name");
  }
}
function views_handler_arg_fulldate($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'fields':
      $fieldinfo['field'] = "DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m%d')";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $query->add_where("DATE_FORMAT(FROM_UNIXTIME(n.created+$timezone), '%Y%m%d') = '$arg'");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F j, Y'), "views/$arg/$query->name");
  }
}

// ---------------------------------------------------------------------------
// Filter handlers

function views_handler_filter_tid() {
  $tids = array();
  $result = db_query("SELECT DISTINCT(td.tid), td.name, v.name as vocabname FROM {term_data} td LEFT JOIN {vocabulary} v ON v.vid = td.vid ORDER BY v.weight, v.name, td.weight, td.name");
  while ($obj = db_fetch_object($result)) {
    $tids[$obj->tid] = "$obj->vocabname: $obj->name";
  }

  return $tids;

}

function views_handler_filter_vid() {
  $vids = array();
  $result = db_query("SELECT v.vid, v.name FROM {vocabulary} v ORDER BY v.weight, v.name");
  while ($obj = db_fetch_object($result)) {
    $vids[$obj->vid] = "$obj->name";
  }
  return $vids;
}

// I worry this will really, really suck for large sites.
// But then, why would large sites create a filter for one particular user?
// Better to go with roles.
function views_handler_filter_username() {
  $uids = array();
  $result = db_query("SELECT u.uid, u.name FROM {users} u WHERE uid != 0 ORDER BY u.name");
  while ($obj = db_fetch_object($result)) {
    $uids[$obj->uid] = "$obj->name";
  }
  return $uids;
}

function views_handler_filter_useranon() {
  return array("0" => variable_get('anonymous', 'Anonymous'));
}

function views_handler_filter_usercurrent() {
  return array("-1" => t('Currently Logged In User'));
}

function views_handler_filter_usercurrent_custom($op, $filter, $filterinfo, &$query) {
  global $user;
  $query->ensure_table("users");
  $query->add_where("users.uid $filter[operator] '$user->uid'");

}

function views_handler_filter_role() {
  $rids = array();
  $result = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
  while ($obj = db_fetch_object($result)) {
    $rids[$obj->rid] = "$obj->name";
  }
  return $rids;
}

function views_handler_filter_nodetype($op) {
  $nodes = array();
  foreach (node_list() as $type) {
    $node_type = node_invoke($type, 'node_name');
    $nodes[$type] = $node_type ? $node_type : $type;
  }
  return $nodes;
}


// ---------------------------------------------------------------------------
// Operator handlers (for filters)

function views_handler_operator_andor() {
  return array('AND' => 'Is All Of', 'OR' => 'Is One Of', 'NOR' => "Is None Of");
}

function views_handler_operator_or() {
  return array('OR' => 'Is One Of', 'NOR' => "Is None Of");
}

function views_handler_operator_eqneq() {
  return array('=' => 'Is Equal To', '!=' => 'Is Not Equal To');
}

function views_handler_operator_yesno() {
  return array('1' => 'Yes', '0' => 'No');
}

?>
