<?php
// $Id: views.module,v 1.60 2006-02-13 19:57:09 merlinofchaos Exp $

// ---------------------------------------------------------------------------
// Acquire Views Data

/*
 * Return the arguments array; construct one if we haven't already. The
 * array is cached in a global, safely named variable so that arguments
 * are only constructed once per run.
 */
function _views_get_arguments($titles = false) {
  static $VIEWS_ARGUMENTS;

  if (!$VIEWS_ARGUMENTS) {
    $data = cache_get('views_arguments');
    $cache = unserialize($data->data);
    if (is_array($cache)) {
      $VIEWS_ARGUMENTS = $cache;
    }
    else {
      $path = drupal_get_path('module', 'views');
      require_once("$path/views_data.inc");
      $arguments = array_merge(module_invoke_all('views_arguments'), _views_internal_arguments());
      foreach ($arguments as $name => $arg) {
        $VIEWS_ARGUMENTS['base'][$name] = $arg['name'];
        $VIEWS_ARGUMENTS['title'][$name] = $arg;
      }
      $cache = $VIEWS_ARGUMENTS;
      cache_set('views_arguments', serialize($cache));
    }
  }
  return ($titles ? $VIEWS_ARGUMENTS['base'] : $VIEWS_ARGUMENTS['title']);
}


/*
 * Constructs the full table information array. Caches it into a global array
 * so that it will only be called once per run.
 */
function _views_get_tables($full = false) {
  static $VIEWS_TABLES;

  if (!$VIEWS_TABLES) {
    $data = cache_get('views_tables');
    $cache = unserialize($data->data);

    if (is_array($cache)) {
      $VIEWS_TABLES = $cache;
    }
    else {
      $path = drupal_get_path('module', 'views');
      require_once("$path/views_data.inc");

      $table_data = array_merge(module_invoke_all('views_tables'), _views_internal_tables());
      $VIEWS_TABLES['tables'] = $table_data;

      foreach ($table_data as $name => $table) {
        if (is_array($table['filters'])) {
          foreach($table['filters'] as $filter => $data) {
            $data['table'] = $name;
            $VIEWS_TABLES['filters']['titles']["$name.$filter"] = $data['name'];
            $VIEWS_TABLES['filters']['base']["$name.$filter"] = $data;
          }
        }
        if (is_array($table['fields'])) {
          foreach($table['fields'] as $field => $data) {
            $data['table'] = $name;
            $VIEWS_TABLES['fields']['titles']["$name.$field"] = $data['name'];
            $VIEWS_TABLES['fields']['base']["$name.$field"] = $data;
          }
        }
        if (is_array($table['sorts'])) {
          foreach($table['sorts'] as $field => $data) {
            $data['table'] = $name;
            $VIEWS_TABLES['sorts']['titles']["$name.$field"] = $data['name'];
            $VIEWS_TABLES['sorts']['base']["$name.$field"] = $data;
          }
        }
      }
      cache_set('views_tables', serialize($VIEWS_TABLES));
    }
  }
  return ($full ? $VIEWS_TABLES : $VIEWS_TABLES['tables']);
}

/*
 * Gets the filter information; if it doesn't exist, call the function
 * that constructs all that.
 */
function _views_get_filters($titles = false) {
  $table_data = _views_get_tables(true);
  return ($titles ? $table_data['filters']['titles'] : $table_data['filters']['base']);
}

/*
 * Gets the field information; if it doesn't exist, call the function
 * that constructs all that.
 */
function _views_get_fields($titles = false) {
  $table_data = _views_get_tables(true);
  return ($titles ? $table_data['fields']['titles'] : $table_data['fields']['base']);
}

/*
 * Gets the sort information; if it doesn't exist, call the function
 * that constructs all that.
 */
function _views_get_sorts($titles = false) {
  $table_data = _views_get_tables(true);
  return ($titles ? $table_data['sorts']['titles'] : $table_data['sorts']['base']);
}

/*
 * Invalidate the views cache, forcing a rebuild on the next grab of table data.
 */
function views_invalidate_cache() {
  cache_clear_all('views_', true);
}

/*
 * Ensures that views have legitimate information; a bit more is stored on
 * the $view object than is in the database, and this isn't necessarily
 * set when a view is constructed externally.
 */
function _views_sanitize_view(&$view) {
  _views_check_arrays($view); // so reference works.
  if (is_array($view->field)) {
    foreach($view->field as $i => $field) {
      $view->field[$i]['fullname'] = "$field[tablename].$field[field]";
      $view->field[$i]['queryname'] = "$field[tablename]_$field[field]";
    }
  }
  if (is_array($view->filter)) {
    foreach($view->filter as $i => $filter) {
      $view->filter[$i]['field'] = "$filter[tablename].$filter[field]";
    }
  }
  if (is_array($view->sort)) {
    foreach($view->sort as $i => $sort) {
      $view->sort[$i]['field'] = "$sort[tablename].$sort[field]";
    }
  }
}

/*
 * Build default view information from all modules and cache it.
 */
function _views_get_default_views() {
  static $VIEWS_DEFAULT_VIEWS;

  if (!$VIEWS_DEFAULT_VIEWS) {
    $data = cache_get('views_default_views');
    $cache = unserialize($data->data);

    if (is_array($cache)) {
      $VIEWS_DEFAULT_VIEWS = $cache;
    }
    else {
      // We have to make sure table data is built in order to be sure about providers.
      $tables = array_keys(_views_get_tables());
      $path = drupal_get_path('module', 'views');
      require_once("$path/views_data.inc");

      $views = array_merge(module_invoke_all('views_default_views'), _views_internal_default_views());
      $VIEWS_DEFAULT_VIEWS = array();
      foreach ($views as $i => $view) {
        if (!is_array($view->requires) || !array_diff($view->requires, $tables)) {
          _views_sanitize_view($view); 
          $VIEWS_DEFAULT_VIEWS[$i] = $view;
        }
      }
      cache_set('views_default_views', serialize($VIEWS_DEFAULT_VIEWS));
    }
  }
  return $VIEWS_DEFAULT_VIEWS;
}

// ---------------------------------------------------------------------------
// Drupal Hooks

/*
 * Implementation of hook_help()
 */
function views_help($section) {
  switch ($section) {
    case 'admin/help#views':
        return _views_help_add();
    case 'admin/modules#description':
      return t('The views module creates customized views of node lists.');
    case 'admin/views/import':
      return t('You may import a view by cut-and-pasting the results of an export view. If the import is successful you will be taken to the Add View page with all of the settings of the imported view..');
    case 'admin/views':
      return t('This screen shows all of the views that are currently defined in your system. The default views are provided by Views and other modules and are automatically available. If a customized view of the same name exists, it will be used in place of a default view.');
  }
  if (!strncmp($section, 'admin/views', 11)) {
    switch (arg(2)) {
      case 'add':
      case 'edit':
        return t('There are many choices to make in editing a view.');
      case 'export':
        return t('You may cut & paste this view into an import function on another system. The view will only work if all modules required by the view are installed on the target location.');
    }
  }
}

/*
 * Because the add/edit page is kind of complicated.
 */
function _views_help_add() {
  $output = t('<p>A view retrieves some number of nodes from the database and displays them in a variety of formats.</p>');
  $output .= t("<h3>View Types</h3>
    <dl>
      <dt><em>List View</em></dt><dd>A List View provides the data for each node retrieved in the form of an unordered list. Each item in the Fields section will be displayed; the Title will be displayed as a label. The order the items appear in the Fields list is the order the items will appear in the output. Leaving the title blank will cause the field to appear with no label (which is desirable in lists that just display titles, for example).</dd>
      <dt><em>Table View</em></dt><dd>A Table View provides the data for each node as one row of a table. The Fields selected in the Fields list will be displayed in the order they are listed. The title column will be shown in the header. If the you set the field to 'sortable' then the header will be click-sortable; be careful here as click-sorts will be processed after built-in sort criteria, and built-in sort criteria can easily make click-sorts invalid. If using click-sorts, choose a field to be the default sort; otherwise the first field presented will be the default sort.</dd>
      <dt><em>Teaser List</em></dt><dd>A Teaser List will simply present the teaser of each node retrieved.</dd>
      <dt><em>Full Nodes</em></dt><dd>A Teaser List will simply present the full content of each node retrieved.</dd>
      <dt><em>Random Teaser</em></dt><dd>This will show a single random teaser.</dd>
      <dt><em>Random Node</em></dt><dd>This will show a single random node's full view.</dd>
    </dl>");

  $output .= t("<h3>Fields</h3>\n");
  $output .= t("<p>When using List or Table view, it is necessary to choose which fields will be displayed to the user.</p><dl>\n");
  $fields = _views_get_fields();
  foreach ($fields as $field) {
    $output .= "<dt><em>$field[name]</em></dt><dd>$field[help]</dd>\n";
  }
  $output .= "</dl>\n";

  $output .= t("<h3>Arguments</h3>\n");
  $output .= t("<p>Arguments can be passed to the View through the URL, in order to create views that are configurable by the user. This is very useful to create views for taxonomy, or to sort by user. When using arguments, substitution is performed on the title. %1 will represent argument 1, %2 will represent argument 2. Each argument has a title field; this title is used if providing a summary view (which can matter because the argument is missing which could result in confusing phrases such as 'view for')</p><dl>\n");
  $arguments = _views_get_arguments();
  foreach ($arguments as $argument) {
    $output .= "<dt><em>$argument[name]</em></dt><dd>$argument[help]</dd>\n";
  }
  $output .= "</dl>\n";

  $output .= t("<h3>Filters</h3>\n");
  $output .= t("<p>Views may be filtered to restrict the view on a number of criteria.</p><dl>\n");
  $filters = _views_get_filters();
  foreach ($filters as $filter) {
    $output .= "<dt><em>$filter[name]</em></dt><dd>$filter[help]</dd>\n";
  }
  $output .= "</dl>\n";

  $output .= t("<h3>Sorting Critera</h3>\n");
  $output .= t("<p>The result set may be sorted on any of the following criteria.</p><dl>\n");
  $sorts = _views_get_sorts();
  foreach ($sorts as $sort) {
    $output .= "<dt><em>$sort[name]</em></dt><dd>$sort[help]</dd>\n";
  }
  $output .= "</dl>\n";

  return $output;
}
/*
 * Implementation of hook_perm()
 */
function views_perm() {
  return array('administer views');
}

/*
 * Implementation of hook_menu()
 */
function views_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    // Invalidate the views cache to ensure that views data gets rebuilt.
    // This is the best way to tell that module configuration has changed.
    if (arg(0) == 'admin' && arg(1) == 'modules') {
      views_invalidate_cache();
    }
    
    $items[] = array('path' => 'admin/views', 
      'title' => t('views'),
      'callback' => 'views_admin_page',
      'access' => user_access('administer views'),
      'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'admin/views/list', 
      'title' => t('list'),
      'callback' => 'views_admin_page',
      'access' => user_access('administer views'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => '-1');
    $items[] = array('path' => 'admin/views/add', 
      'title' => t('add'),
      'callback' => 'views_admin_add_page',
      'access' => user_access('administer views'),
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/views/edit', 
      'title' => t('edit view'),
      'callback' => 'views_admin_edit_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/views/import', 
      'title' => t('import'),
      'callback' => 'views_admin_import_page',
      'access' => user_access('administer views'),
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/views/export', 
      'title' => t('export view'),
      'callback' => 'views_admin_export_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/views/delete', 
      'title' => t('edit view'),
      'callback' => 'views_admin_delete_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/views/enable', 
      'callback' => 'views_admin_enable_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/views/disable', 
      'callback' => 'views_admin_disable_page',
      'access' => user_access('administer views'),
      'type' => MENU_CALLBACK);

    global $user;
    $roles = array_keys($user->roles);

    $result = db_query("SELECT * FROM {view_view} WHERE page = 1");
    while ($view = db_fetch_object($result)) {
      // unpack the array
      $view->access = ($view->access ? explode(', ', $view->access) : array());

      $type = _views_menu_type($view);
      $items[] = array('path' => $view->url,
        'title' => views_get_title($view, 'menu'),
        'callback' => 'views_view_page',
        'callback arguments' => array($view->name),
        'access' => !$view->access || array_intersect($view->access, $roles),
        'weight' => intval($view->menu_tab_weight),
        'type' => $type,
      );
      
      if ($type == MENU_DEFAULT_LOCAL_TASK) {
        $items[] = array('path' => dirname($view->url),
          'title' => views_get_title($view, 'menu'),
          'callback' => 'views_view_page',
          'callback arguments' => array($view->name),
          'access' => !$view->access || array_intersect($view->access, $roles),
          'type' => MENU_NORMAL_ITEM,
        );
      }
      $used[$view->name] = true;
    }

    $dviews = _views_get_default_views();
    $views_status = variable_get('views_defaults', array());

    foreach ($dviews as $name => $view) {
      if ($view->page && !$used[$name] && 
         ($views_status[$name] == 'enabled' || (!$view->disabled && $views_status[$name] != 'disabled'))) {
        $type = _views_menu_type($view);

        $items[] = array('path' => $view->url,
          'title' => views_get_title($view, 'menu'),
          'callback' => 'views_view_page',
          'callback arguments' => array($view->name),
          'access' => !$view->access || array_intersect($view->access, $roles),
          'weight' => intval($view->menu_tab_weight),
          'type' => $type,
        );
        if ($type == MENU_DEFAULT_LOCAL_TASK) {
          $items[] = array('path' => dirname($view->url),
            'title' => views_get_title($view, 'menu'),
            'callback' => 'views_view_page',
            'callback arguments' => array($view->name),
            'access' => !$view->access || array_intersect($view->access, $roles),
            'type' => MENU_NORMAL_ITEM,
          );
        }
      }
    }
  }

  return $items;
}

function _views_menu_type($view) {
  if ($view->menu) {
    if ($view->menu_tab_default) {
      $type = MENU_DEFAULT_LOCAL_TASK;
    }
    else if ($view->menu_tab) {
      $type = MENU_LOCAL_TASK;
    }
    else {
      $type = MENU_NORMAL_ITEM;
    }
  }
  else {
    $type = MENU_CALLBACK;
  }
  return $type;
}

/*
 * Implementation of hook_block()
 */
function views_block($op = 'list', $delta = 0) {
  $block = array();
  if ($op == 'list') {
    // Grab views from the database and provide them as blocks.
    $result = db_query("SELECT vid, block_title, page_title, name FROM {view_view} WHERE block = 1");
    while ($view = db_fetch_object($result)) {
      $block[$view->name]['info'] = views_get_title($view, 'block');
    }

    $dviews = _views_get_default_views();
    $views_status = variable_get('views_defaults', array());

    foreach ($dviews as $name => $view) {
      if (!isset($block[$name]) && $view->block &&
        ($views_status[$name] == 'enabled' || (!$view->disabled && $views_status[$name] != 'disabled'))) {
        $block[$name]['info'] = views_get_title($view, 'block');
      }
    }
    return $block;
  }
  else if ($op == 'view') {
    return views_view_block($delta);
  }
}

// ---------------------------------------------------------------------------
// Administrative Pages

/*
 * This page lists all system views and provides links to edit them.
 */
function views_admin_page() {
  $numViews = 25;

  drupal_set_title(t('administer views'));

  $result = pager_query("SELECT vid, name, description, menu_title, page_title, block_title, url, page, menu, block FROM {view_view} ORDER BY name", $numViews);

  while ($view = db_fetch_object($result)) {
    $url = ($view->page ? l($view->url, $view->url) : t('No Page View'));
    $provides = array();
    if ($view->page) {
      $provides[] = 'Page';
    }
    if ($view->block) {
      $provides[] = 'Block';
    }
    if ($view->menu) {
      $provides[] = 'Menu';
    }
    $items[] = array($view->name, views_get_title($view, 'menu'), $view->description, implode(', ', $provides), $url, theme('links', array(l('edit', "admin/views/edit/$view->vid"), l('export', "admin/views/export/$view->vid"), l(t('delete'), "admin/views/delete/$view->vid"))));
  }

  if ($items) {
    $output = theme('table', array(t('View'), t('Title'), t('Description'), t('Provides'), t('URL'), t('Actions')), $items, array("cellpadding" => "4"), t('Existing Views'));
    $output .= theme('pager', NULL, $numViews);
  }
  else {
    $output .= t('<p>No views have currently been defined.</p>');
  }

  $result = db_query("SELECT name FROM {view_view}");
  while ($view = db_fetch_object($result)) {
    $used[$view->name] = true;
  }

  $output .= t('<p>Below are system default views; if you edit one of these, a view will be created that will override any system use of the view.</p>');
  $items = array();
  $dviews = _views_get_default_views();

  $views_status = variable_get('views_defaults', array());

  foreach ($dviews as $view) {
    $url = ($view->page ? l($view->url, $view->url) : t('No Page View'));

    if ($used[$view->name]) {
      $status = t('Overridden');
    }
    else if (isset($views_status[$view->name])) {
      if ($views_status[$view->name] == 'enabled') {
        $status = 'Enabled';
      }
      else {
        $status = 'Disabled';
      }
    }
    else if ($view->disabled) {
      $status = 'Disabled';
    }
    else {
      $status = 'Enabled';
    }

    $provides = array();
    if ($view->page) {
      $provides[] = t('Page');
    }
    if ($view->block) {
      $provides[] = t('Block');
    }
    if ($view->menu) {
      $provides[] = t('Menu');
    }

    $links = array(l(t('add'), "admin/views/add/$view->name"));
    if ($status == 'Enabled') {
      $links[] = l(t('disable'), "admin/views/disable/$view->name");
    }
    else if ($status == 'Disabled') {
      $links[] = l(t('enable'), "admin/views/enable/$view->name");
    }

    $items[] = array($view->name, views_get_title($view, 'menu'), $view->description, implode(', ', $provides), $url, $status, theme('links', $links));
  }

  if ($items) {
    $output .= theme('table', array(t('Default View'), t('Title'), t('Description'), t('Provides'), t('URL'), t('Status'), t('Actions')), $items, array("cellpadding" => "4"), t('Default Views'));
  }
  else {
    $output .= t('<p>No views have currently been defined.</p>');
  }

  return $output;
}

/*
 * Page to enable a disabled default view
 */
function views_admin_enable_page($view = '') {
  if ($view) {
    $views_status = variable_get('views_defaults', array());
    $views_status[$view] = 'enabled';
    variable_set('views_defaults', $views_status);
    menu_rebuild();
  }
  drupal_goto('admin/views');
}

/*
 * Page to disable an enabled default view
 */
function views_admin_disable_page($view = '') {
  if ($view) {
    $views_status = variable_get('views_defaults', array());
    $views_status[$view] = 'disabled';
    variable_set('views_defaults', $views_status);
    menu_rebuild();
  }
  drupal_goto('admin/views');
}

/*
 * Provide a textarea to paste a view export into.
 */
function views_admin_import_page() {
  $op = $_POST['edit']['name'];

  if ($op) {
    return views_admin_add_page();
  }
  drupal_set_title("Import a View");
  $form['view'] = array(
    '#type' => 'textarea',
    '#title' => t('Import View Code'),
    '#cols' => 60,
    '#rows' => 6,
    '#description' => t('Cut and paste the results of an Export View here.'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Submit"),
  );

  return drupal_get_form('views_import_view', $form);
}

/*
 * Handle the submit button on importing a view.
 */
function views_import_view_submit($formid, $form) {
  ob_start();
  eval($form['view']);
  ob_end_clean();

  $tables = array_keys(_views_get_tables());
  if ($view) {
    if (!is_array($view->requires) || !array_diff($view->requires, $tables)) {
      _views_sanitize_view($view);
      drupal_set_title(t('Add a View'));
      $path = drupal_get_path('module', 'views');
      require_once("$path/views_form.inc");
      $output = _views_view_form(NULL, $view, NULL);
      print theme('page', $output);
      exit;
    }
    else {
      drupal_set_message(t("You don't seem to have the following requirements: ") . implode(', ', array_diff($view->requires, $tables)));
    }
  }
  else {
    drupal_set_message(t('Unable to get a view out of that.'));
  }
}

/*
 * Export a view for cut & paste.
 */
function views_admin_export_page($vid = '') {
  // FIXME: Change this to a textarea.
  $path = drupal_get_path('module', 'views');
  require_once("$path/views_data.inc");
  $code = views_create_view_code($vid);
  $lines = substr_count($code, "\n");
  $form['code'] = array(
    '#type' => 'textarea',
    '#title' => $view->name,
    '#default_value' => $code,
    '#rows' => $lines);
  return drupal_get_form('views_export', $form);
}

/*
 * Provide a form to add a view. Allow adding a view from default templates.
 */
function views_admin_add_page() {
  $args = func_get_args();
  while ($next = array_shift($args)) {
    $template = ($template ? "/$next" : $next);
  }

  $edit = $_POST['edit'];
  $op = $_POST['op'];

  if (is_array($edit)) {
    $edit = (object) $edit;
  }

  if ($op == t('Cancel')) {
    return drupal_goto('admin/views');
  }

  $view = _views_get_default_view($template);

  drupal_set_title(t('Add a View'));

  $path = drupal_get_path('module', 'views');
  require_once("$path/views_form.inc");
  return _views_view_form($edit, $view, $op);
}

/*
 * Provide a form to edit a view.
 */
function views_admin_edit_page($vid = '') {
  $edit = $_POST['edit'];
  $op = $_POST['op'];

  if ($op == t('Cancel')) {
    return drupal_goto('admin/views');
  }

  if ($op == t('Delete')) {
    return drupal_goto("admin/views/delete/$vid");
  }

  if (is_array($edit)) {
    $edit = (object) $edit;
  }

  $view = _views_load_view($vid);

  if (!$view) {
    return drupal_goto('admin/views');
  }

  drupal_set_title(t('Edit View %n', array('%n' => $view->name)));

  $path = drupal_get_path('module', 'views');
  require_once("$path/views_form.inc");
  return _views_view_form($edit, $view, $op);
}

/*
 * Provide a form to confirm deletion of a view.
 */
function views_admin_delete_page($vid = '') {
  $view = _views_load_view($vid);

  if (!$view) {
    return drupal_goto('admin/views');
  }

  $form['vid'] = array('#type' => 'value', '#value' => $view->vid);
  return confirm_form('views_delete_confirm', $form,
    t('Are you sure you want to delete %title?', array('%title' => $view->name)), 
    $_GET['destination'] ? $_GET['destination'] : 'admin/views', 
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel')  
  );
}

/*
 * Handle the submit button to delete a view.
 */
function views_delete_confirm_submit($formid, $form) {
  if ($form['confirm']) {
    _views_delete_view((object) $form);
    menu_rebuild();
    drupal_goto('admin/views');
  }
}

/*
 * Get an empty view with basic defaults.
 */
function _views_get_default_view($template = '') {
  if ($template) {
    $dviews = _views_get_default_views();
    if (isset($dviews[$template])) {
      $view = $dviews[$template];
    }
  }
  if (!$view) {  
    $view = new stdClass();
    $view->use_pager = true;
    $view->nodes_per_page = variable_get('default_nodes_main', 10);
    $view->page_header_format = variable_get('filter_default_format', 1);
    $view->block_header_format = variable_get('filter_default_format', 1);
    $view->vid = 0;
  }

  return _views_check_arrays($view);
}

// ---------------------------------------------------------------------------
// View Construction

/*
 * Ensure that all the arrays in a view exist so we don't run into array
 * operations on a non-array error.
 */
function _views_check_arrays(&$view) {
  if (!is_array($view->field)) {
    $view->field = array();
  }
  if (!is_array($view->sort)) {
    $view->sort = array();
  }
  if (!is_array($view->argument)) {
    $view->argument = array();
  }
  if (!is_array($view->breadcrumb)) {
    $view->breadcrumb = array();
  }
  if (!is_array($view->filter)) {
    $view->filter = array();
  }
  if (!is_array($view->access)) {
    $view->access = array();
  }
  return $view;
}

/*
 * This function loads a view by name or vid; if not found in db, it looks
 * for a default view by that name.
 */
function views_get_view($viewname) {
  $view = _views_load_view($viewname);
  if ($view) {
    return $view;
  }

  if (is_int($viewname)) {
    return; // don't bother looking if viewname is an int!
  }

  $dviews = _views_get_default_views();

  if (isset($dviews[$viewname])) {
    return $dviews[$viewname];
  }

}

/*
 * This views a view by page, and should only be used as a callback.
 */
function views_view_page() {
  $args = func_get_args();
  while ($next = array_shift($args)) {
    if (!$viewname) {
      $viewname = $next;
    }
    else {
      $viewname .= "/$next";
    }

    if ($view = views_get_view($viewname)) {
      break;
    }
  }
  if (!$view) {
    drupal_not_found();
    exit;
  }

  $output = views_build_view('page', $view, $args, $view->use_pager, $view->nodes_per_page);
  return $output;
}

/*
 * This views a view by block. Can be used as a callback or programmatically.
 */
function views_view_block($vid) {
  $view = views_get_view($vid);

  if (!$view || !$view->block) {
    return NULL;
  }

  global $user;
  $roles = array_keys($user->roles);
  if ($view->access && !array_intersect($roles, $view->access)) {
    return NULL;
  }

  $block['content'] = views_build_view('block', $view, $args, false, $view->nodes_per_block);
  $block['subject'] = views_get_title($view, 'block');
  return $block;
}

/*
 * This builds the basic view.
 * @param $type
 *    'page' -- Produce output as a page, sent through theme.
 *      The only real difference between this and block is that
 *      a page uses drupal_set_title to change the page title.
 *    'block' -- Produce output as a block, sent through theme.
 *    'embed' -- Use this if you want to embed a view onto another page,
 *      and don't want any block or page specific things to happen to it.
 *    'result' -- return an $info array. The array contains:
 *      query: The actual query ran.
 *      countquery: The count query that would be run if limiting was required.
 *      summary: True if an argument was missing and a summary was generated.
 *      level: What level the missing argument was at.
 *      result: Database object you can use db_fetch_object on.
 *    'items' -- return info array as above, except instead of result,
 *      items: An array of objects containing the results of the query.
 * @param $view
 *   The actual view object. Use views_get_view() if you only have the name or
 *   vid.
 * @param $args
 *   args taken from the URL. Not relevant for many views. Can be null.
 * @param $use_pager
 *   If set, use a pager. Set this to the pager id you want it
 *   to use if you plan on using multiple pagers on a page. To go with the
 *   default setting, set to $view->use_pager.
 * @param $limit
 *   Required if $use_pager is set; if $limit is set and $use_pager is
 *   not, this will be the maximum number of records returned. This is ignored
 *   if using a view set to return a random result. To go with the default
 *   setting set to $view->nodes_per_page or $view->nodes_per_block. If
 *   $use_pager is set and this field is not, you'll get a SQL error. Don't
 *   do that!
*/
function views_build_view($type, $view, $args = array(), $use_pager = false, $limit = 0) {

  $viewtype = ($type == 'block' ? $view->block_type : $view->page_type);

  if ($view->query) {
    $info['query'] = $view->query;
    $info['countquery'] = $view->countquery;
    
    if ($viewtype == 'table') {
      $view->table_header = _views_construct_header($view, $fields);
    }
  }
  else {
    $path = drupal_get_path('module', 'views');
    require_once("$path/views_query.inc");

    $info = _views_build_query($view, $args);
    if ($info['fail']) {
      return;
    }
  }

  // Run-time replacement so we can do cacheing
  global $user;
  $info['query'] = str_replace('***CURRENT_USER***', $user->uid, $info['query']);
  $info['countquery'] = str_replace('***CURRENT_USER***', $user->uid, $info['countquery']);

  $query = db_rewrite_sql($info['query'], 'node');

  if (substr($viewtype, 0, 6) == 'random') {
    $cquery = db_rewrite_sql($info['countquery'], 'node', 'numrecs');
    $count = db_result(db_query($cquery));
    $which = rand(0, $count - 1);
    $result = db_query_range($query, $which, 1);
  }
  else if ($use_pager) {
    $cquery = db_rewrite_sql($info['countquery'], 'node', 'numrecs');
    $result = pager_query($query, $limit, $use_pager, $cquery);
  }
  else {
    $result = ($limit ? db_query_range($query, 0, $limit) : db_query($query));
  }

  if ($type == 'result') {
    $info['result'] = $result;
    return $info; 
  }

  $items = array();
  while ($item = db_fetch_object($result)) {
    $items[] = $item;
  }

  if ($type == 'items') {
    $info['items'] = $items;
    return $info;
  }

  if ($info['summary']) {
    $out .= theme("views_summary_$view->name", $view, $type, $info['level'], $items, $args);
    $output .= $out ? $out : theme('views_summary', $view, $type, $info['level'], $items, $args);
  }
  else {
    $output .= theme("views_view_$view->name", $view, $type, $items);
    if (!$output) {
      $output .= theme('views_view', $view, $type, $items);
    }
  }

  if ($use_pager) {
    if ($view->table_header && !$info['summary']) {
      $output .= theme('pager', NULL, $limit, $use_pager, tablesort_pager());
    }
    else {
      $output .= theme('pager', NULL, $limit, $use_pager);
    }
  }
  return $output;
}

// ---------------------------------------------------------------------------
// Utility

/*
 * Figure out what timezone we're in; needed for some date manipulations.
 */
function _views_get_timezone() {
  global $user;
  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else {
    $timezone = variable_get('date_default_timezone', 0);
  }

  return $timezone;
}
/*
 * Figure out what the title of a view should be.
 */
function views_get_title($view, $context = 'menu', $args = NULL) {
  if ($context == 'menu' && $view->menu_title)
    return $view->menu_title;

  if ($context == 'block' && $view->block_title)
    return $view->block_title;

  if ($args === NULL)
    $args = $view->args;

  $count = count($args);
  if ($count >= count($view->argument)) {
    $title = $view->page_title;
  }
  else {
    $title = $view->argument[$count]['title'];
  }
  if (!$title && $context == 'menu') {
    $title = $view->block_title;
  }

  if (!$view->argument) {
    return $title;
  }

  $arginfo = _views_get_arguments();
  foreach ($view->argument as $i => $arg) {
    if (!isset($args[$i])) {
      break;
    }
    $argtype = $arg['type'];
    if (function_exists($arginfo[$argtype]['handler'])) {
      // call the handler
      $rep = $arginfo[$argtype]['handler']('title', $args[$i], $argtype);
      $title = str_replace("%" . ($i + 1), $rep, $title);
    }
  }
  return $title;
}

/*
 * Determine whether or not a view is cacheable. A view is not cacheable if
 * there is some kind of user input or data required. For example, views
 * that need to restrict to the 'current' user, or any views that require
 * arguments or allow click-sorting are not cacheable.
 */
function _views_is_cacheable(&$view) {
  // views with arguments are immediately not cacheable.
  if (!empty($view->argument)) {
    return false;
  }

  $filters = _views_get_filters();

  foreach ($view->filter as $i => $filter) {
    if ($filters[$filter['field']]['cacheable'] == 'no')  {
      return false;
    }
  }

  foreach ($view->field as $i => $field) {
    if ($field['sortable']) {
      return false;
    }
  }
  return true;
}

// ---------------------------------------------------------------------------
// Database functions

/*
 * Provide all the fields in a view.
 */
function _views_view_fields() {
  return array('vid', 'name', 'description', 'access', 'page', 'page_title', 'page_header', 'page_header_format', 'page_type', 'use_pager', 'nodes_per_page', 'url', 'menu', 'menu_tab', 'menu_tab_default', 'menu_tab_weight', 'menu_title', 'block', 'block_title', 'block_use_page_header', 'block_header', 'block_header_format', 'block_type', 'nodes_per_block', 'block_more', 'url', 'breadcrumb_no_home', 'changed', 'query', 'countquery');
}

/*
 * Delete a view from the database.
 */
function _views_delete_view($view) {
  $view->vid = intval($view->vid);
  if (!$view->vid) {
    return;
  }

  db_query("DELETE FROM {view_view} where vid=%d", $view->vid);
  db_query("DELETE FROM {view_sort} where vid=%d", $view->vid);
  db_query("DELETE FROM {view_breadcrumb} where vid=%d", $view->vid);
  db_query("DELETE FROM {view_argument} where vid=%d", $view->vid);
  db_query("DELETE FROM {view_tablefield} where vid=%d", $view->vid);
}

/*
 * Load a view from the database.
 */
function _views_load_view($arg) {

  $where = (intval($arg) == 0 ? "v.name = '%s'" : "v.vid =  %d");
  $view = db_fetch_object(db_query("SELECT v.* FROM {view_view} v WHERE $where", $arg));

  if (!$view->name) {
    return NULL;
  }

  $view->access = ($view->access ? explode(', ', $view->access) : array());

  // load the sorting criteria too.
  $result = db_query("SELECT * FROM {view_sort} vs WHERE vid = $view->vid ORDER BY position ASC");

  $view->sort = array();
  while ($sort = db_fetch_array($result)) {
    if (substr($sort['field'], 0, 2) == 'n.') {
      $sort['field'] = 'node' . substr($sort['field'], 1);
    }
    $view->sort[] = $sort;
  }

  $result = db_query("SELECT * FROM {view_argument} WHERE vid = $view->vid ORDER BY position ASC");

  $view->argument = array();
  while ($arg = db_fetch_array($result)) {
    $view->argument[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_tablefield} WHERE vid = $view->vid ORDER BY position ASC");

  $view->field = array();
  while ($arg = db_fetch_array($result)) {
    if ($arg['tablename'] == 'n') {
      $arg['tablename'] = 'node';
    }
    $arg['fullname'] = "$arg[tablename].$arg[field]";
    $arg['queryname'] = "$arg[tablename]_$arg[field]";
    $view->field[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_breadcrumb} WHERE vid = $view->vid ORDER BY position ASC");

  $view->breadcrumb = array();
  while ($arg = db_fetch_array($result)) {
    $view->breadcrumb[] = $arg;
  }

  $result = db_query("SELECT * FROM {view_filter} WHERE vid = $view->vid ORDER BY position ASC");

  $view->filter = array();
  while ($filter = db_fetch_array($result)) {
    if (substr($filter['field'], 0, 2) == 'n.') {
      $filter['field'] = 'node' . substr($filter['field'], 1);
    }
    if ($filter['operator'] == 'AND' || $filter['operator'] == 'OR' || $filter['operator'] == 'NOR') {
      $filter['value'] = explode(',', $filter['value']);
    }
    $view->filter[] = $filter;
  }

  return $view;
}

/*
 * Save a view to the database.
 */
function _views_save_view($view) {
  _views_check_arrays($view);

  // cache the query
  if (_views_is_cacheable($view)) {
    $path = drupal_get_path('module', 'views');
    require_once("$path/views_query.inc");

    $info = _views_build_query($view);
    $view->query = $info['query'];
    $view->countquery = $info['countquery'];
  }
  else {
    $view->query = NULL;
    $view->countquery = NULL;
  }

  $view->access = implode(', ', $view->access);

  $view->changed = time();
  $fields = _views_view_fields();
  if ($view->vid) {
    // update
    // Prepare the query:
    foreach ($view as $key => $value) {
      if (in_array($key, $fields)) {
        $q[] = db_escape_string($key) ." = '%s'";
        $v[] = $value;
      }
    }

    // Update the view in the database:
    db_query("UPDATE {view_view} SET ". implode(', ', $q) ." WHERE vid = '$view->vid'", $v);
    db_query("DELETE from {view_sort} WHERE vid='$view->vid'");
    db_query("DELETE from {view_argument} WHERE vid='$view->vid'");
    db_query("DELETE from {view_tablefield} WHERE vid='$view->vid'");
    db_query("DELETE from {view_breadcrumb} WHERE vid='$view->vid'");
    db_query("DELETE from {view_filter} WHERE vid='$view->vid'");
  }
  else {
    // insert

    // This method really saves on typos, and makes it a lot easier to add fields
    // later on.
    $view->vid = db_next_id('{view_view}_vid');

    // Prepare the query:
    foreach ($view as $key => $value) {
      if (in_array((string) $key, $fields)) {
        $k[] = db_escape_string($key);
        $v[] = $value;
        $s[] = "'%s'";
      }
    }

    db_query("INSERT INTO {view_view} (". implode(", ", $k) .") VALUES (". implode(", ", $s) .")", $v);
  }

  foreach ($view->sort as $i => $sort) {
    db_query("INSERT INTO {view_sort} (vid, position, field, sortorder, options) VALUES ($view->vid, $i, '$sort[field]', '$sort[sortorder]', '$sort[options]')");
  }

  foreach ($view->argument as $i => $arg) {
    db_query("INSERT INTO {view_argument} (vid, type, argdefault, title, options, position) VALUES ($view->vid, '$arg[type]', '$arg[argdefault]', '$arg[title]', '$arg[options]', $i)");
  }

  foreach ($view->field as $i => $arg) {
    db_query("INSERT INTO {view_tablefield} (vid, tablename, field, label, handler, sortable, defaultsort, position) VALUES ($view->vid, '$arg[tablename]', '$arg[field]', '$arg[label]', '$arg[handler]', '$arg[sortable]', '$arg[defaultsort]', $i)");
  }

  foreach ($view->breadcrumb as $i => $arg) {
    db_query("INSERT INTO {view_breadcrumb} (vid, title, link, position) VALUES ($view->vid, '$arg[title]', '$arg[link]', $i)");
  }

  foreach ($view->filter as $i => $arg) {
    if (is_array($arg['value']) && ($arg['operator'] == 'AND' || $arg['operator'] == 'OR' || $arg['operator'] == 'NOR')) {
      $arg['value'] = implode(',', $arg['value']);
    }
    db_query("INSERT INTO {view_filter} (vid, tablename, field, value, operator, options, position) VALUES ($view->vid, '$arg[tablename]', '$arg[field]', '$arg[value]', '$arg[operator]', '$arg[options]', $i)");
  }

}

// ---------------------------------------------------------------------------
// Themeable and support

/*
 * Figure out how to display the data of a field. Many fields simply display
 * the data as-is, but many fields have to massage that data, which is
 * done through handlers.
 */
function _views_handle_field($fields, $field, $data) {

  $info = $fields[$field['fullname']];

  if ($field['handler'] && function_exists($field['handler'])) {
    return $field['handler']($info, $field, $data->$field['queryname'], $data);
  }

  if ($info['handler'] && is_string($info['handler']) && function_exists($info['handler'])) {
    return $info['handler']($info, $field, $data->$field['queryname'], $data);
  }

  return check_plain($data->$field['queryname']);
}

/*
 * Construct a header for a table view.
 */
function _views_construct_header($view, $fields) {
  foreach($view->field as $field) {
    $header = array();
    $info = $fields[$field['fullname']];

    $header['data'] = ($field['label'] ? $field['label'] : $info['name']);

    if ($field['sortable']) {
      $header['field'] = $field['fullname'];
    }
    if ($field['defaultsort']) {
      $header['sort'] = strtolower($field['defaultsort']);
    }

    // Add CSS id to table cell header cell.
    $header['id'] = "view-field-$field[queryname]";
    $header['class'] = "view-cell-header";
    $headers[] = $header;
  }
  return $headers;
}

/*
 * Display the nodes of a view as a list.
 */
function views_view_list($view, $nodes) {
  foreach ($nodes as $node) {
    $item = '';
    foreach ($view->field as $field) {
      if ($field['label']) {
        $item .= "<div class='view-label' id='view-label-$field[queryname]'>" . $field['label'] . "</div>";
      }
      $item .= "<div class='view-field' id='view-data-$field[queryname]'>" . _views_handle_field($fields, $field, $node) . "</div>";
    }
    $items[] = "<div class='view-item' id='view-item-$view->name'>$item</div>\n"; // l($node->title, "node/$node->nid");
  }
  if ($items) {
    return theme('item_list', $items);
  }
}

/*
 * Display the nodes of a view as a table.
 */
function views_view_table($view, $nodes) {
  $fields = _views_get_fields(); 

  foreach ($nodes as $node) {
    $row = array();
    foreach ($view->field as $field) {
      $cell['data'] = _views_handle_field($fields, $field, $node);
      $cell['class'] = 'view-field';
      $cell['id'] = "view-field-$field[queryname]";
      $row[] = $cell;
    }
    $rows[] = $row;
  }
  return theme('table', $view->table_header, $rows);
}

/*
 * Display the nodes of a view as plain nodes.
 */
function views_view_nodes($nodes, $teasers = true, $links = true) {
  foreach ($nodes as $n) {
    $node = node_load($n->nid);
    $output .= node_view($node, $teasers, false, $links);
  }
  return $output;
}

function views_set_breadcrumb($view) {
  $breadcrumb = drupal_get_breadcrumb();
  if ($view->breadcrumb_no_home) {
    array_shift($breadcrumb);
  }

  if ($view->args) {
    // Add a breadcrumb trail for each level of argument we're at.
    $url = $view->url;
    $args = array();
    foreach ($view->args as $level => $arg) {
      $breadcrumb[] = l(views_get_title($view, 'page', $args), $url);
      // For next round.
      $args[] = $arg;
      $url .= "/$arg";
    }
  }

  drupal_set_breadcrumb($breadcrumb);
}

/*
 * Display a view.
 */
function theme_views_view($view, $type, $nodes) {

  if ($type == 'page') {
    // Done before theming so theme can change it if it wants.
    drupal_set_title(views_get_title($view, 'page'));
    views_set_breadcrumb($view);
  }

  $header = ($type != 'block' || $view->block_use_page_header ? $view->page_header : $view->block_header);
  $header_format = ($type != 'block' || $view->block_use_page_header ? $view->page_header_format : $view->block_header_format);

  if ($header) {
    $header = check_markup($header, $header_format, false);
    $output = "<div class='view-header' id='view-header-$view->name'>$header</div>\n";
  }

  switch (($type == 'block' ? $view->block_type : $view->page_type)) {
    case 'list': // => t("List View"),
      $output .= views_view_list($view, $nodes);
      break;
    case 'table': // => t("Table"),
      $output .= views_view_table($view, $nodes);
      break;
    case 'teaser': // => t("Teaser List"),
    case 'random teaser': // random teaser
      $output .= views_view_nodes($nodes, true);
      break;
    case 'node': // => t("Full Nodes")
    case 'random node': // random node
      $output .= views_view_nodes($nodes, false);
      break;
  }

  if ($type == 'block' && $view->block_more && count($nodes) >= $view->nodes_per_block) {
    $output .= theme('views_more', $view->url); 
  }
  return "<div class='view' id='view-$view->name'>$output</div>\n";
}

/*
 * Format the 'more' link for a view.
 */
function theme_views_more($url) {
  return "<div class='more'>" . l(t('[More]'), $url) . "</div>";
}

/*
 * Get the summary link for a view.
 */
function views_get_summary_link($argtype, $item, $base) {
  $arginfo = _views_get_arguments();
  return $arginfo[$argtype]['handler']('link', $item, $argtype, $base);
}

/*
 * In a summary view, each entry links to a more specific entry
 * in that view. Construct the base of that link. 
 */
function views_get_summary_link_base($argtype, $url, $level, $args)
{
  $arginfo = _views_get_arguments();
  if (!function_exists($arginfo[$argtype]['handler'])) {
    return NULL;
  }

  $arg = $url;
  for ($i = 0; $i < $level; $i++) {
    $arg .= "/$args[$i]";
  }

  return $arg;

}

/*
 * Display a summary version of a view.
 */
function theme_views_summary($view, $type, $level, $nodes, $args) {
  if ($type == 'page') {
    drupal_set_title(views_get_title($view, 'page'));
    views_set_breadcrumb($view);
  }

  $base = views_get_summary_link_base($view->argument[$level]['type'], $view->url, $level, $args);
  foreach ($nodes as $node) {
    $items[] = array(views_get_summary_link($view->argument[$level]['type'], $node, $base), $node->num_nodes);
  }
  if ($items) {
    $output .= theme('table', array(), $items, array('id' => 'summary'));
  }
  
  return "<div class='views' id='$view->name'>$output</div>";
  
}

// ---------------------------------------------------------------------------
// Field handlers

/*
 * Field handlers accept the following arguments:
 * @param $fieldinfo
 *   The array of info for that field from the global tables array.
 * @param $fielddata
 *   All of the info about that field in the database. 
 * @param $value
 *   The value of the field fetched from the database.
 * @param $data
 *   The rest of the data about the node fetched from the database, in case
 *   the handler needs more than just the field.
 */

/*
 * Format a date.
 */
function views_handler_field_date($fieldinfo, $fielddata, $value, $data) {
  return format_date($value);
}

/*
 * Format a date using small representation.
 */
function views_handler_field_date_small($fieldinfo, $fielddata, $value, $data) {
  return format_date($value, 'small');
}

/*
 * Format a date using large representation.
 */
function views_handler_field_date_large($fieldinfo, $fielddata, $value, $data) {
  return format_date($value, 'large');
}

/*
/*
 * Format a date as "X time ago".
 */
function views_handler_field_since($fieldinfo, $fielddata, $value, $data) {
  return format_interval(time() - $value);
}

/*
 * Format a field as an integer.
 */
function views_handler_field_int($fieldinfo, $fielddata, $value, $data) {
  return intval($value);
}

/*
 * Format as a field as a username. Needs to also have a 'uid' available,
 * specified in the field info.
 */
function views_handler_field_username($fieldinfo, $fielddata, $value, $data) {
  $obj->name = check_plain($value);
  $uidfield = $fielddata['tablename'] . "_"  . $fieldinfo['uid'];
  $obj->uid = $data->$uidfield;
  return theme('username', $obj);
}

/*
 * Format a field as a link to a node.
 */
function views_handler_field_nodelink($fieldinfo, $fielddata, $value, $data) {
  return l($value, "node/$data->nid");
}

/*
 * Format a field as a link to a 'mark', stating whether or not the node has
 * updated since it was last viewed by the user.
 */
function views_handler_field_nodelink_with_mark($fieldinfo, $fielddata, $value, $data) {
  return l(check_plain($value), "node/$data->nid") .' '. theme('mark', node_mark($data->nid, $data->node_changed));
}

function views_handler_field_allterms($fieldinfo, $fielddata, $value, $data) {
  if ($fieldinfo['vocabulary']) {
    $terms = taxonomy_node_get_terms_by_vocabulary($data->nid, $fieldinfo['vocabulary']);
  }
  else {
    $terms = taxonomy_node_get_terms($data->nid);
  }

  $node->taxonomy = $terms;
  return theme('links', taxonomy_link('taxonomy terms', $node));
}

/*
 * Format a field as a node type.
 */
function views_handler_nodetype($fieldinfo, $fielddata, $value, $data) {
  return node_get_name($value);
}

/*
 * Format a field as a number of comments, plus the number of unread comments.
 */
function views_handler_comments_with_new($fieldinfo, $fielddata, $value, $data) {
  $comments = intval($value);
  if (module_exist('comment') && $comments && $new = comment_num_new($data->nid)) {
    $comments .= '<br />';
    $comments .= l(t('%num new', array('%num' => $new)), "node/$data->nid", NULL, NULL, 'new');
  }
  return $comments;
}

// ---------------------------------------------------------------------------
// Sort handlers

// function views_handler_sort_random(&$query, $sortinfo, $sort) {
//   $query->add_orderby('', "rand()");
// }

// ---------------------------------------------------------------------------
// Argument handlers


/*
 * Argument handlers take up to 4 fields, which vary based upon the operation.
 * @param $op
 *   The operation to perform:
 *   'summary': A summary view is being constructed. In this case the handler
 *              is to add the necessary components to the query to display
 *              the summary. It must return a $fieldinfo array with 'field'
 *              set to the field the summary is ordered by; if this is aliased
 *              for some reason (such as being an aggregate field) set 'fieldname'
 *              to the alias.
 *    'filter': Filter the view based upon the argument sent; essentially just
 *              add the where clause here.
 *    'link':   Provide a link from a summary view based upon the argument sent.
 *    'title':  Provide the title of a view for substitution.
 * @param &$query
 *   For summary, filter and link, this is the actual query object; for title this is
 *   simply the value of the argument. 
 * @param $a2
 *   For summary, this is the type of the argument. For the others, this is the info
 *   for the argument from the global table. (Why is this not consistent? I dunno).
 * @param $a3
 *   For summary, this is the 'options' field from the db. For 'filter' this is
 *   the argument received. For 'link' this is the base URL of the link. Not used
 *   for 'title'.
 *   
 */

/*
 * Handle the node type argument.
 */
function views_handler_arg_nodetype($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->add_field("type");
      $query->add_groupby("node.type");
      $fieldinfo['field'] = "node.type";
      return $fieldinfo;
      break;
    case 'filter':
      $where = db_escape_string($arg);
      $query->add_where("node.type = '$where'");
      break;
    case 'link':
      return l(node_get_name($query->type), "$arg/$query->type");
    case 'title':
      return $query;
  }
}

function views_handler_arg_uid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->add_table('users', true);
      $query->add_field('name', 'users');
      $query->add_field('uid', 'users');
      $fieldinfo['field'] = "users.name";
      return $fieldinfo;
      break;
    case 'filter':
      $uid = intval($arg);
      $query->add_where("node.uid = $uid");
      break;
    case 'link':
      $name = ($query->name ? $query->name : variable_get('anonymous', 'Anonymous'));
      return l($name, "$arg/" . intval($query->uid));
    case 'title':
      if (!$query) {
        return variable_get('anonymous', 'Anonymous');
      } 
      $user = db_fetch_object(db_query("SELECT name FROM {users} WHERE uid = '%d'", $query));
      return $user->name;
  }
}

function views_handler_arg_uid_touch($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->add_table('users', true);
      $query->add_field('name', 'users');
      $query->add_field('uid', 'users');
      $fieldinfo['field'] = "users.name";
      return $fieldinfo;
      break;
    case 'filter':
      $uid = intval($arg);
      $table_data = _views_get_tables();
      $joininfo = $table_data['comments']['join'];
      $joininfo['extra'] = array('uid' => $uid);
      $tblnum = $query->add_table("comments", false, 1, $joininfo);
      $table = $query->get_table_name('comments', $tblnum);

      $query->set_distinct(); // once you do this, there's just one node.
      $query->add_where("node.uid = '%s' OR $table.uid = '%s'", $uid, $uid);
      break;
    case 'link':
      $name = ($query->name ? $query->name : variable_get('anonymous', 'Anonymous'));
      return l($name, "$arg/" . intval($query->uid));
    case 'title':
      if (!$query) {
        return variable_get('anonymous', 'Anonymous');
      } 
      $user = db_fetch_object(db_query("SELECT name FROM {users} WHERE uid = '%d'", $query));
      return $user->name;
  }
}


function views_handler_arg_taxid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->ensure_table('term_data', true);
      $query->add_field('name', 'term_data');
      $query->add_field('weight', 'term_data');
      $query->add_field('tid', 'term_data');
      $fieldinfo['field'] = "term_data.name";
      $query->add_orderby('term_data', 'weight', "ASC");
      $query->add_orderby('term_data', 'name', "ASC");
      return $fieldinfo;
      break;
    case 'filter':
      if ($arg == 0) { // untagged only!
        $query->ensure_table("term_node");
        $query->add_where("term_node.tid IS NULL");
      }
      else {
        $values = _views_break_phrase($arg);
        _views_add_taxonomy(strtoupper($values[0]), $values[1], $argtype['options'], $query);
      }
      break;
    case 'link':
      $name = ($query->name ? $query->name : t('Uncategorized'));
      return l($name, "$arg/" . intval($query->tid));
    case 'title':
      if (!$query) {
        return t('Uncategorized');
      }
      $term = db_fetch_object(db_query("SELECT name FROM {term_data} WHERE tid = '%d'", $query));
      return $term->name;
  }
}

function views_handler_arg_taxletter($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->add_table('term_data', true);
      $len = intval($arg);
      $fieldinfo['field'] = ($len <= 0 ? "term_data.name" : "LEFT(term_data.name, $len)");

      $fieldinfo['fieldname'] = 'letter';
      $query->add_field('tid', 'term_data');
      $query->add_where('term_data.name IS NOT NULL');
      return $fieldinfo;
      break;
    case 'filter':
      $len = intval($argtype['options']);
      $query->add_table('term_data', true);

      if ($len <= 0) {
        $query->add_where("term_data.name = '$arg'");
      } else {
        $query->add_where("LEFT(term_data.name, $len) = '$arg'");
      }
      break;
    case 'link':
      return l(strtoupper($query->letter), "$arg/$query->letter");
    case 'title':
      return strtoupper($query);
  }
}

function views_handler_arg_nodeletter($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $len = intval($arg);
      $fieldinfo['field'] = ($len <= 0 ? "node.title" : $fieldinfo['field'] = "LEFT(node.title, $len)");
      $fieldinfo['fieldname'] = 'letter';
      return $fieldinfo;
      break;
    case 'filter':
      $len = intval($argtype['options']);
      if ($len <= 0) {
        $query->add_where("node.title = '$arg'");
      } else {
        $query->add_where("LEFT(node.title, $len) = '$arg'");
      }
      break;
    case 'link':
      return l(strtoupper($query->letter), "$arg/$query->letter");
    case 'title':
      return strtoupper($query);
  }
}

function views_handler_arg_year($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'summary':
      $fieldinfo['field'] = "YEAR(FROM_UNIXTIME(node.created+$timezone))";
      $fieldinfo['fieldname'] = 'year';
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $year = intval($arg);
      $query->add_where("YEAR(FROM_UNIXTIME(node.created+$timezone)) = $year");
      break;
    case 'link':
      return l($query->year, "$arg/$query->year");
    case 'title':
      return $query;
  }
}
function views_handler_arg_month($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'summary':
      $fieldinfo['field'] = "MONTH(FROM_UNIXTIME(node.created+$timezone))";
      $fieldinfo['fieldname'] = 'name';
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $month = intval($arg);
      $query->add_where("MONTH(FROM_UNIXTIME(node.created+$timezone)) = $month");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F'), "$arg/$query->name");
    case 'title':
      return format_date(strtotime("2005${query}01"), 'custom', 'F');
  }
}
function views_handler_arg_week($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'summary':
      // The 3 makes the week 1-53, the first week of the year has at least 3 days
      $fieldinfo['field'] = "WEEK(FROM_UNIXTIME(node.created+$timezone), 3)";
      $fieldinfo['fieldname'] = "name";
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      // The 3 makes the week 1-53, the first week of the year has at least 3 days
      $week = intval($arg);
      $query->add_where("WEEK(FROM_UNIXTIME(node.created+$timezone), 3) = $week");
      break;
    case 'link':
      return l("Week $query->name", "$arg/$query->name");
    case 'title':
      return $query;
  }
}
function views_handler_arg_monthyear($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'summary':
      $fieldinfo['field'] = "DATE_FORMAT(FROM_UNIXTIME(node.created+$timezone), '%Y%m')";
      $fieldinfo['fieldname'] = 'name';
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $where = db_escape_string($arg);
      $query->add_where("DATE_FORMAT(FROM_UNIXTIME(node.created+$timezone), '%Y%m') = '$where'");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F, Y'), "$arg/$query->name");
    case 'title':
      return format_date(strtotime("${query}01"), 'custom', 'F, Y');
  }
}
function views_handler_arg_fulldate($op, &$query, $argtype, $arg = '') {
  $timezone = _views_get_timezone();

  switch($op) {
    case 'summary':
      $fieldinfo['field'] = "DATE_FORMAT(FROM_UNIXTIME(node.created+$timezone), '%Y%m%d')";
      $fieldinfo['fieldname'] = 'name';
      $query->add_field('created');
      return $fieldinfo;
      break;
    case 'filter':
      $where = db_escape_string($arg);
      $query->add_where("DATE_FORMAT(FROM_UNIXTIME(node.created+$timezone), '%Y%m%d') = '$where'");
      break;
    case 'link':
      return l(format_date($query->created, 'custom', 'F j, Y'), "$arg/$query->name");
    case 'title':
      return format_date(strtotime($query), 'custom', 'F j, Y');
  }
}

function views_handler_arg_nid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->add_field("title");
      $query->add_field('nid');
      $fieldinfo['field'] = 'node.nid';
      return $fieldinfo;
    case 'filter':
      $query->add_where("node.nid = %d", $arg);
      break;
    case 'link':
      return l($query->title, "$arg/$query->nid");
    case 'title':
      $node = db_fetch_object(db_query("SELECT title FROM {node} WHERE nid=%d", $query));
      return $node->title;
  }
}

// ---------------------------------------------------------------------------
// Filter handlers

/*
 * There are two kinds of filter handlers here; the easy kind simply creates an
 * array of options. For example, for taxonomy we provide a list of all taxonomy
 * terms which is placed in the select box.
 *
 * The other type is the 'custom' handler which is used to create a customized
 * WHERE clause for specialized filters.
 *
 * It takes 4 parameters.
 * @param $op
 *   At this time it will always be 'handler'.
 * @param $filter
 *   Information on the filter from the database, including 'options', 'value' and 'operator'.
 * @param $filterinfo
 *   Information on the filter from the global table array.
 * @param &$query
 *   The query object being worked on.
 */

/*
 * Filter a view based on taxonomy id.
 */
function views_handler_filter_tid($op, $filterinfo) {
  $tids = array();
  if ($filterinfo['vocabulary']) {
    $where = "WHERE td.vid = $filterinfo[vocabulary]";
  }
  $result = db_query("SELECT DISTINCT(td.tid), td.name, v.name as vocabname FROM {term_data} td LEFT JOIN {vocabulary} v ON v.vid = td.vid $where ORDER BY v.weight, v.name, td.weight, td.name");
  while ($obj = db_fetch_object($result)) {
    if ($filterinfo['vocabulary']) {
      $tids[$obj->tid] = "$obj->name";
    }
    else {
      $tids[$obj->tid] = "$obj->vocabname: $obj->name";
    }
  }

  return $tids;
}
/*
 * add custom WHERE clauses and joins to a query based on taxonomy.
 */
function views_handler_filter_tid_custom($op, $filter, $filterinfo, &$query) {
  // When filtering via depth, we have to add a chain. If it's an or query
  // we add 1 chain, but in an and query we actually basically have to add
  // a 2 dimensional array. 

  _views_add_taxonomy($filter['operator'], $filter['value'], $filter['options'], $query);

}

/*
 * Create a list of vocabulary names and IDs.
 */
function views_handler_filter_vid() {
  $vids = array();
  $result = db_query("SELECT v.vid, v.name FROM {vocabulary} v ORDER BY v.weight, v.name");
  while ($obj = db_fetch_object($result)) {
    $vids[$obj->vid] = $obj->name;
  }
  return $vids;
}

/*
 * Create a list of usernames.
 * I worry this will really, really suck for large sites.
 * But then, why would large sites create a filter for one particular user?
 * Better to go with roles.
 */
function views_handler_filter_username() {
  $uids = array();
  $result = db_query("SELECT u.uid, u.name FROM {users} u WHERE uid != 0 ORDER BY u.name");
  while ($obj = db_fetch_object($result)) {
    $uids[$obj->uid] = $obj->name;
  }
  return $uids;
}

/*
 * Simple array for anonymous..
 */

function views_handler_filter_useranon() {
  return array("0" => variable_get('anonymous', 'Anonymous'));
}

/*
 * Simple array for current user.
 */
function views_handler_filter_usercurrent() {
  return array('***CURRENT_USER***' => t('Currently Logged In User'));
}

/*
 * Custom filter for current user.
 */
function views_handler_filter_usercurrent_custom($op, $filter, $filterinfo, &$query) {
  global $user;
  $query->ensure_table('users');
  $query->add_where("users.uid $filter[operator] '$user->uid'");
}

/*
 * Custom filter for new content.
 */
function views_handler_filter_isnew($op, $filter, $filterinfo, &$query) {
  global $user;
  if (!$user || !$user->uid) {
    return;
  }

  // Hey, Drupal kills old history, so nodes that haven't been updated
  // since NODE_NEW_LIMIT are bzzzzzzzt outta here!

  $limit = NODE_NEW_LIMIT;

  $query->ensure_table('history');
  if (module_exist('comment')) {
    $query->ensure_table('node_comment_statistics');
    $clause = "OR node_comment_statistics.last_comment_timestamp > $limit";
    $clause2 = "OR history.timestamp < node_comment_statistics.last_comment_timestamp";
  }

  // NULL means a history record doesn't exist. That's clearly new content.
  // Unless it's very very old content.

  $query->add_where("(history.timestamp IS NULL AND (node.changed > $limit $clause)) OR history.timestamp < node.changed $clause2");
}

/*
 * Create a list of roles.
 */
function views_handler_filter_role() {
  $rids = array();
  $result = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
  while ($obj = db_fetch_object($result)) {
    $rids[$obj->rid] = $obj->name;
  }
  return $rids;
}

/*
 * Create a list of node types.
 */
function views_handler_filter_nodetype($op) {
  $nodes = array();
  foreach (node_get_types() as $type => $name) {
    $nodes[$type] = $name;
  }
  return $nodes;
}

/*
 * Add special info to see if a user either authored OR commented on a post
 */
function views_handler_filter_uid_touched($op, $filter, $filterinfo, &$query) {
  if (!module_exist('comment')) { // not much to do in this case
    $query->add_where("node.uid = '%s'", $filter['value']);
    return;
  }

  $table_data = _views_get_tables();
  $joininfo = $table_data['comments']['join'];
  $joininfo['extra'] = array('uid' => $filter['value']);
  $tblnum = $query->add_table('comments', false, 1, $joininfo);
  $table = $query->get_table_name('comments', $tblnum);

  $query->set_distinct(); // once you do this, there's just one node.
  $query->add_where("node.uid = '%s' OR $table.uid = '%s'", $filter['value'], $filter['value']);
}

/*
 * Set a query to be distinct as a filter handler
 */
function views_handler_filter_distinct($op, $filter, $filterinfo, &$query) {
  $query->set_distinct();
}

// ---------------------------------------------------------------------------
// Operator handlers (for filters)

/*
 * A list of and/or/nor.
 */
function views_handler_operator_andor() {
  return array('AND' => t('Is All Of'), 'OR' => t('Is One Of'), 'NOR' => t('Is None Of'));
}

/*
 * A list of or/nor.
 */
function views_handler_operator_or() {
  return array('OR' => t('Is One Of'), 'NOR' => t('Is None Of'));
}

/*
 * A list of equal or not equal to.
 */
function views_handler_operator_eqneq() {
  return array('=' => t('Is Equal To'), '!=' => t('Is Not Equal To'));
}

/*
 * A list of yes/no.
 */
function views_handler_operator_yesno() {
  return array('1' => t('Yes'), '0' => t('No'));
}

// ---------------------------------------------------------------------------
// Operator handlers (for filters)

/*
 * update module for UTF.
 */
function views_update_1() {
  return _system_update_utf8(array('view_view', 'view_tablefield', 'view_filter', 'view_sort', 'view_argument'));
}
